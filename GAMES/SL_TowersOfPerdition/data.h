/*************************************************************************
 * Shattered Lands: Towers of Perdition                                  *
 * C opyright (C) 2019  Justin (tuxinator2009) Davis                     *
 *                                                                       *
 * This program is free software: you can redistribute it and/or modify  *
 * it under the terms of the GNU General Public License as published by  *
 * the Free Software Foundation, either version 3 of the License, or     *
 * (at your option) any later version.                                   *
 *                                                                       *
 * This program is distributed in the hope that it will be useful,       *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 * GNU General Public License for more details.                          *
 *                                                                       *
 * You should have received a copy of the GNU General Public License     *
 * along with this program.  If not, see <http://www.gnu.org/licenses/>. *
 *************************************************************************/

#ifndef DATA_H
#define DATA_H

#define RAW_DATA uint8_t 
#define DATA_POINTER uint8_t* 

#define CHAR_SPACE	0
#define CHAR_A			1
#define CHAR_B			2
#define CHAR_C			3
#define CHAR_D			4
#define CHAR_E			5
#define CHAR_F			6
#define CHAR_G			7
#define CHAR_H			8
#define CHAR_I			9
#define CHAR_J			10
#define CHAR_K			11
#define CHAR_L			12
#define CHAR_M			13
#define CHAR_N			14
#define CHAR_O			15
#define CHAR_P			16
#define CHAR_Q			17
#define CHAR_R			18
#define CHAR_S			19
#define CHAR_T			20
#define CHAR_U			21
#define CHAR_V			22
#define CHAR_W			23
#define CHAR_X			24
#define CHAR_Y			25
#define CHAR_Z			26
#define CHAR_0			27
#define CHAR_1			28
#define CHAR_2			29
#define CHAR_3			30
#define CHAR_4			31
#define CHAR_5			32
#define CHAR_6			33
#define CHAR_7			34
#define CHAR_8			35
#define CHAR_9			36
#define CHAR_DASH		37
#define CHAR_EXCL		38
#define CHAR_PLUS		39
#define CHAR_QUOTE	40
#define CHAR_COMMA	41
#define CHAR_DOT		42
#define CHAR_QUES		43
#define CHAR_SLASH	44
#define CHAR_OK			45
#define CHAR_NONE		46
#define CHAR_SWORD	47
#define CHAR_SHIELD	48
#define CHAR_BOOT		49
#define CHAR_WAND		50
#define CHAR_NULL		62
#define CHAR_LINE		63

//BEGIN: Player Data
static const int16_t PLAYER_LEVEL1_HP = 16;
static const int16_t PLAYER_LEVEL99_HP = 999;
static const int16_t PLAYER_LEVEL1_MP = 1;
static const int16_t PLAYER_LEVEL99_MP = 99;
static const int16_t PLAYER_LEVEL1_NEXTEXP = 16;
static const int16_t PLAYER_LEVEL99_NEXTEXP = 999;
static const uint8_t START_MAP = 1;
static const int8_t START_X = 3;
static const int8_t START_Y = 3;
static const int8_t START_CHUNK = 1;
RAW_DATA level1Stats[] = {3, 1, 2, 1};
//END: Player Data

//BEGIN: Bitmaps
RAW_DATA bmpTitle[] = //756 bytes uncompressed (691 bytes compressed but 200 bytes save by not using drawCompressed)
{
	0x00, 0xf0, 0xf8, 0xfe, 0xd6, 0x86, 0x16, 0x16, 0x0c, 0x18, 0x07, 0xff, 0xf8, 0xfe, 0x9e, 0xde,
	0xc0, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
	0x80, 0x00, 0x20, 0xe0, 0xe0, 0xc0, 0xc0, 0x00, 0x00, 0x20, 0xe0, 0xe0, 0xc0, 0xc0, 0x00, 0x00,
	0x00, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0,
	0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0x00, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 0x00,
	0x00, 0x00, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xce, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00,
	0xf0, 0x1f, 0x20, 0x40, 0x80, 0x80, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xe0, 0xbf, 0x55, 0xaa, 0x55, 0xfa, 0xdf, 0xaa, 0x55, 0xaa, 0xf5, 0x0f, 0x00, 0xc0,
	0xc1, 0x41, 0x81, 0x81, 0xc3, 0xff, 0xfe, 0x60, 0x00, 0x07, 0xff, 0xff, 0xc1, 0x01, 0x00, 0xf8,
	0xfb, 0xfb, 0xfb, 0x03, 0x42, 0xdf, 0xff, 0xff, 0xff, 0x80, 0xc1, 0xfd, 0xfd, 0xfc, 0xfd, 0x00,
	0x00, 0xff, 0xff, 0x7f, 0x07, 0x03, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x07, 0x03, 0x1c, 0x7f, 0x3f,
	0xff, 0xcd, 0xcd, 0xcd, 0xcd, 0xc1, 0x8f, 0x8f, 0x0e, 0x0e, 0x7c, 0xfc, 0xfd, 0xfd, 0x07, 0x05,
	0x01, 0x01, 0x1d, 0x7f, 0x3f, 0xff, 0xcd, 0xcd, 0xcd, 0xcd, 0xc1, 0x8f, 0x8f, 0x0e, 0x0e, 0x3c,
	0xff, 0xdf, 0xdf, 0xdf, 0xd0, 0xc0, 0xc1, 0xd1, 0xdf, 0xdf, 0x00, 0x00, 0x00, 0xf8, 0x07, 0x00,
	0x00, 0xf0, 0x0f, 0x00, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0xe2, 0x1e, 0x02, 0x02, 0x02, 0x56,
	0xab, 0x56, 0xab, 0x55, 0xfb, 0xaf, 0x55, 0xaa, 0x55, 0xfa, 0x07, 0x00, 0x00, 0x1c, 0x1c, 0xfc,
	0xfd, 0xf1, 0xf1, 0x01, 0x01, 0x00, 0x00, 0x00, 0x03, 0x01, 0x01, 0x80, 0x80, 0x80, 0x83, 0x81,
	0x81, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x81, 0x81,
	0x81, 0x80, 0x80, 0x9c, 0xfc, 0xfd, 0xfd, 0x01, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x81, 0x81,
	0x01, 0x01, 0x01, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x80, 0x40, 0xa0, 0x50,
	0xa8, 0x50, 0xa8, 0x51, 0xa9, 0xd1, 0x69, 0xb1, 0xdb, 0x6b, 0xb1, 0xd8, 0x68, 0xb0, 0xd8, 0xe8,
	0x71, 0x79, 0xf9, 0x79, 0xf9, 0xf9, 0x79, 0xf9, 0xf8, 0xf8, 0xf0, 0xff, 0x54, 0xac, 0x54, 0xaf,
	0x58, 0xf0, 0x80, 0x80, 0x80, 0x80, 0x80, 0xe0, 0x9f, 0x80, 0x80, 0x80, 0x80, 0xd5, 0x6a, 0xd5,
	0x6a, 0xb5, 0x7f, 0xaa, 0x55, 0xaa, 0xfd, 0x03, 0x00, 0x00, 0x00, 0xfc, 0xfe, 0xfe, 0xfe, 0xc0,
	0x40, 0x80, 0x80, 0x80, 0x80, 0x80, 0xbe, 0xfe, 0xfe, 0xff, 0x01, 0x83, 0xfb, 0xfb, 0xf9, 0xfb,
	0xb8, 0x07, 0x7f, 0x7f, 0x07, 0x03, 0x03, 0x3f, 0x3f, 0x3e, 0x78, 0xff, 0xbf, 0xbf, 0xbf, 0xa1,
	0x81, 0x83, 0xa3, 0xbf, 0xbf, 0x00, 0x1c, 0xbf, 0x3f, 0x7b, 0x73, 0xf3, 0xfb, 0xb3, 0x03, 0x00,
	0x00, 0x00, 0x80, 0x40, 0xa0, 0x50, 0xa8, 0x54, 0xaa, 0x55, 0xaa, 0xd5, 0x6a, 0xb5, 0xda, 0x6d,
	0xb6, 0xdb, 0x6d, 0xb6, 0xdb, 0xed, 0xf6, 0xfb, 0xfd, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xcc,
	0xf6, 0xf8, 0xc6, 0xfd, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xeb, 0xd5, 0xaa, 0x55, 0xfa, 0x0f, 0xe1,
	0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x5f, 0xaa, 0x55, 0xaa, 0x55, 0xaa,
	0xd5, 0x6a, 0x35, 0x1e, 0x01, 0x00, 0x00, 0x00, 0x30, 0x30, 0xf0, 0x30, 0x30, 0x30, 0x00, 0xc3,
	0x33, 0x33, 0x33, 0xc0, 0x01, 0xf3, 0x03, 0x03, 0x01, 0x01, 0xf1, 0x01, 0xf1, 0x31, 0x33, 0x33,
	0x33, 0x30, 0x00, 0xf3, 0x33, 0x33, 0x31, 0xc0, 0x00, 0xc1, 0xc1, 0x33, 0x33, 0x33, 0x43, 0x03,
	0x03, 0x03, 0x03, 0x00, 0x01, 0x01, 0x01, 0xc1, 0x31, 0x33, 0x33, 0xc1, 0x00, 0x00, 0xf2, 0x31,
	0x32, 0x31, 0x32, 0x01, 0x02, 0x01, 0x02, 0x03, 0x01, 0x02, 0x03, 0xf1, 0x32, 0x33, 0x31, 0xc2,
	0x03, 0x03, 0xf3, 0x33, 0x33, 0x33, 0x33, 0x03, 0xf3, 0x33, 0x33, 0x33, 0x33, 0xc3, 0x03, 0xf3,
	0x33, 0x33, 0x43, 0x83, 0x83, 0x03, 0x33, 0x33, 0xf3, 0x33, 0x33, 0x03, 0x33, 0x33, 0x32, 0xf2,
	0x32, 0x32, 0x02, 0x32, 0x32, 0xf2, 0x32, 0x33, 0x33, 0x01, 0xc1, 0x31, 0x31, 0x30, 0xc0, 0x00,
	0xf0, 0xf0, 0xc0, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x60, 0x60,
	0x60, 0x1f, 0x00, 0x1f, 0x60, 0x60, 0x1e, 0x60, 0x1f, 0x00, 0x7f, 0x62, 0x62, 0x62, 0x62, 0x60,
	0x00, 0x7f, 0x02, 0x0e, 0x12, 0x61, 0x00, 0x11, 0x11, 0x62, 0x62, 0x62, 0x1e, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x60, 0x60, 0x60, 0x1f, 0x00, 0x00, 0x7f, 0x02, 0x02, 0x02,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x0c, 0x0c, 0x0c, 0x03, 0x00, 0x00,
	0x7f, 0x62, 0x62, 0x62, 0x60, 0x00, 0x7f, 0x02, 0x02, 0x0e, 0x12, 0x61, 0x00, 0x7f, 0x60, 0x60,
	0x10, 0x0f, 0x0f, 0x00, 0x60, 0x60, 0x7f, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00,
	0x00, 0x60, 0x60, 0x7f, 0x60, 0x60, 0x60, 0x00, 0x1f, 0x60, 0x60, 0x60, 0x1f, 0x00, 0x7f, 0x7f,
	0x01, 0x02, 0x1c, 0x7f
};

RAW_DATA tileBitmaps[] = //2050 bytes
{
	// TILE 00
	0x10, 0x10, 0x08, 0x05, 0x09, 0x90, 0x90, 0x40, 0x20, 0x48, 0x88, 0x84, 0x02, 0x04, 0x09, 0x09, 
	0x84, 0x54, 0x90, 0x08, 0x04, 0x08, 0x10, 0x50, 0x40, 0x20, 0x10, 0x24, 0x44, 0x42, 0x01, 0x02, 
	// TILE 01
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	// TILE 02
	0x7f, 0x3f, 0xcf, 0xf3, 0x6f, 0x5f, 0x3f, 0xbf, 0xdf, 0x4f, 0xb3, 0xfc, 0xdb, 0x97, 0x4f, 0x6f, 
	0xdb, 0xc9, 0xd2, 0x3f, 0x1b, 0x42, 0xc9, 0xed, 0xf6, 0xf2, 0xf4, 0x8f, 0x86, 0xb0, 0xf2, 0xfb, 
	// TILE 03
	0xff, 0xff, 0xff, 0x3f, 0x47, 0xab, 0x47, 0xa9, 0x54, 0xa1, 0x07, 0x8f, 0x47, 0x1f, 0xff, 0xff, 
	0xef, 0xe7, 0xd1, 0xca, 0x95, 0x8a, 0x51, 0x2a, 0x15, 0x2a, 0x54, 0x2a, 0x85, 0xaa, 0x80, 0xc7, 
	// TILE 04
	0xff, 0xff, 0x7f, 0xfb, 0xff, 0xdf, 0xf7, 0xff, 0xdf, 0xfe, 0xff, 0x7f, 0xfd, 0xff, 0xff, 0xef, 
	0xfd, 0xbf, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xef, 0xff, 0xff, 0xf7, 0xfe, 0xff, 
	// TILE 05
	0x03, 0xf9, 0x6c, 0xf8, 0x02, 0xe4, 0x6a, 0x24, 0xa9, 0x23, 0x87, 0x2f, 0x3f, 0x7f, 0xff, 0xff, 
	0xfe, 0xfd, 0xfc, 0xfd, 0xc4, 0xb8, 0xaa, 0xb9, 0xaa, 0xb9, 0x80, 0xbe, 0xc7, 0xbe, 0xc0, 0xf9, 
	// TILE 06
	0x0f, 0x73, 0x2d, 0x56, 0xee, 0x64, 0x12, 0x78, 0xb2, 0x56, 0x22, 0x08, 0xce, 0x95, 0x83, 0x0f, 
	0x00, 0x5d, 0x02, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc1, 0x81, 0x05, 0x2a, 0x00, 
	// TILE 07
	0xff, 0x1f, 0xcf, 0x97, 0x5b, 0x9b, 0xcd, 0xd5, 0xd1, 0xcd, 0x9b, 0x5b, 0x97, 0xcf, 0x1f, 0xff, 
	0xff, 0x00, 0xbd, 0x78, 0xf5, 0x0c, 0xe9, 0xe5, 0xe5, 0xe9, 0x0c, 0xf5, 0x78, 0xbd, 0x00, 0xff, 
	// TILE 08
	0xff, 0x07, 0x53, 0x29, 0x95, 0xa9, 0x95, 0x4b, 0x07, 0x7f, 0x7f, 0x7f, 0xff, 0xff, 0x7f, 0x7f, 
	0xff, 0x00, 0x55, 0x22, 0xaa, 0xaa, 0x88, 0x55, 0x00, 0xa5, 0xab, 0x04, 0x9a, 0x94, 0x8a, 0xa5, 
	// TILE 09
	0x7f, 0x7f, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x07, 0x4b, 0x95, 0xa9, 0x95, 0x29, 0x53, 0x07, 0xff, 
	0x2b, 0x84, 0x9a, 0x94, 0x8a, 0x25, 0xab, 0x00, 0x55, 0x88, 0xaa, 0xaa, 0x22, 0x55, 0x00, 0xff, 
	// TILE 10
	0x00, 0xb6, 0x00, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0x00, 0xb6, 0x00, 
	0x00, 0x6d, 0x00, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0x00, 0x6d, 0x00, 
	// TILE 11
	0xff, 0x00, 0x73, 0xe0, 0xde, 0x1e, 0xbd, 0x81, 0xbd, 0xbd, 0x1e, 0xde, 0xe0, 0x73, 0x00, 0xff, 
	0xff, 0x00, 0xce, 0x81, 0x7b, 0x78, 0xf7, 0x07, 0xf7, 0xf7, 0x78, 0x7b, 0x81, 0xce, 0x00, 0xff, 
	// TILE 12
	0xff, 0x00, 0x55, 0x22, 0xaa, 0xaa, 0x88, 0x55, 0x00, 0xaa, 0x2a, 0xa2, 0x2a, 0xc8, 0xaa, 0x6a, 
	0xff, 0xe0, 0xd5, 0xa2, 0xaa, 0xaa, 0x88, 0xd5, 0xe0, 0xea, 0xe2, 0xea, 0xe0, 0xff, 0xea, 0xf5, 
	// TILE 13
	0xa2, 0x6a, 0xc8, 0x2a, 0xaa, 0x22, 0xaa, 0x00, 0x55, 0x88, 0xaa, 0xaa, 0x22, 0x55, 0x00, 0xff, 
	0xea, 0xf5, 0xff, 0xe0, 0xea, 0xe2, 0xea, 0xe0, 0xd5, 0x88, 0xaa, 0xaa, 0xa2, 0xd5, 0xe0, 0xff, 
	// TILE 14
	0x50, 0xaa, 0x52, 0xa8, 0x52, 0xaa, 0x50, 0xaa, 0x52, 0xa8, 0x52, 0xaa, 0x50, 0xaa, 0x52, 0xa8, 
	0x05, 0x6a, 0xa5, 0x8a, 0xa5, 0xaa, 0x85, 0xaa, 0xa5, 0x8a, 0xa5, 0xaa, 0x85, 0xaa, 0x65, 0x0a, 
	// TILE 15
	0xff, 0x00, 0x39, 0x07, 0xef, 0xe0, 0xde, 0x1e, 0xde, 0xde, 0xe0, 0xef, 0x07, 0x39, 0x00, 0xff, 
	0xff, 0xf8, 0xe7, 0xde, 0xbd, 0x83, 0x55, 0x2a, 0x54, 0x29, 0x83, 0xbd, 0xde, 0xe7, 0xf8, 0xff, 
	// TILE 16
	0xff, 0xff, 0x3f, 0xdf, 0xff, 0xfd, 0xf3, 0xff, 0xdf, 0xef, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 
	0xef, 0x9f, 0xff, 0xff, 0xfb, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xe7, 0x7b, 0xff, 0xff, 0xfe, 0xff, 
	// TILE 17
	0xea, 0xee, 0xe0, 0xee, 0xea, 0xee, 0xee, 0xae, 0xee, 0x0e, 0xee, 0xae, 0xee, 0xee, 0xee, 0xee, 
	0xee, 0xee, 0xee, 0xee, 0xee, 0xae, 0xee, 0x0e, 0xee, 0xae, 0xee, 0xea, 0xee, 0xe0, 0xee, 0xea, 
	// TILE 18
	0xea, 0xee, 0xe0, 0xe2, 0x04, 0xea, 0x44, 0x6a, 0x6a, 0x44, 0xea, 0x04, 0xe2, 0xee, 0xee, 0xee, 
	0x6e, 0x2e, 0x40, 0x7e, 0x7e, 0x7d, 0x7d, 0x01, 0x01, 0x7d, 0x7d, 0x7e, 0x7e, 0x40, 0x2e, 0x6a, 
	// TILE 19
	0x00, 0x00, 0x18, 0xc8, 0x08, 0x08, 0x18, 0xc8, 0x08, 0x08, 0x18, 0xc8, 0x08, 0x08, 0x00, 0x00, 
	0x00, 0x00, 0x60, 0x21, 0x20, 0x22, 0x60, 0x21, 0x20, 0x22, 0x60, 0x21, 0x20, 0x22, 0x00, 0x00, 
	// TILE 20
	0x00, 0xf9, 0xfa, 0xf9, 0xfa, 0xf9, 0xfa, 0xf9, 0xfa, 0xf9, 0xfa, 0xf9, 0xfa, 0xf9, 0xfa, 0x00, 
	0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 
	// TILE 21
	0xea, 0xee, 0x00, 0x00, 0x00, 0xf6, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 
	0xee, 0xee, 0x00, 0x00, 0x00, 0x87, 0x8f, 0x0f, 0x8f, 0x8f, 0x8f, 0x8f, 0x8f, 0x8f, 0x8f, 0x8f, 
	// TILE 22
	0xfa, 0xfa, 0xf8, 0xfa, 0xfa, 0x02, 0xf6, 0xfa, 0xfa, 0xfa, 0xf6, 0x00, 0x00, 0x00, 0xee, 0xee, 
	0x8f, 0x8f, 0x8f, 0x8f, 0x8f, 0x80, 0x87, 0x07, 0x87, 0x87, 0x87, 0x00, 0x00, 0x00, 0xee, 0xea, 
	// TILE 23
	0x00, 0x00, 0xc0, 0xc7, 0xc0, 0xc8, 0xc0, 0x87, 0xc0, 0x08, 0xc0, 0x87, 0xc0, 0xc8, 0x00, 0x00, 
	0xee, 0xee, 0xee, 0xee, 0xee, 0xae, 0xee, 0x0e, 0xee, 0xae, 0xee, 0xea, 0xee, 0xe0, 0xee, 0xea, 
	// TILE 24
	0x11, 0x11, 0x11, 0xf1, 0x11, 0x11, 0x11, 0x1f, 0x11, 0x11, 0x11, 0xf1, 0x11, 0x11, 0x11, 0x1f, 
	0x11, 0x11, 0x11, 0xf1, 0x11, 0x11, 0x11, 0x1f, 0x11, 0x11, 0x11, 0xf1, 0x11, 0x11, 0x11, 0x1f, 
	// TILE 25
	0xfa, 0x79, 0xba, 0xb9, 0xfa, 0x39, 0xfa, 0x39, 0xfa, 0x79, 0xba, 0x79, 0xfa, 0x39, 0xba, 0x79, 
	0x7f, 0x7b, 0x7a, 0x7d, 0x7f, 0x78, 0x7e, 0x78, 0x7f, 0x7c, 0x7b, 0x7c, 0x7f, 0x78, 0x7e, 0x7f, 
	// TILE 26
	0xfa, 0x79, 0x7a, 0x79, 0xfa, 0x79, 0xfa, 0xf9, 0x7a, 0xf9, 0x7a, 0xf9, 0xfa, 0x79, 0xfa, 0xf9, 
	0x7f, 0x7b, 0x78, 0x7b, 0x7f, 0x78, 0x7e, 0x7d, 0x78, 0x7f, 0x78, 0x7e, 0x7d, 0x78, 0x7f, 0x7f, 
	// TILE 27
	0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 
	0xe8, 0x03, 0x73, 0x03, 0xe3, 0xa3, 0xe3, 0x03, 0xe3, 0xa3, 0xe3, 0xe3, 0x03, 0x73, 0x03, 0xe8, 
	// TILE 28
	0x00, 0xf9, 0xfa, 0xf9, 0xfa, 0xf9, 0xfa, 0xf9, 0xfa, 0xf9, 0xfa, 0xf9, 0xfa, 0xf9, 0xfa, 0xf9, 
	0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 
	// TILE 29
	0xfa, 0xf9, 0xfa, 0xf9, 0xfa, 0xf9, 0xfa, 0xf9, 0xfa, 0xf9, 0xfa, 0xf9, 0xfa, 0xf9, 0xfa, 0xf9, 
	0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 
	// TILE 30
	0xfa, 0xf9, 0xfa, 0xf9, 0xfa, 0xf9, 0xfa, 0xf9, 0xfa, 0xf9, 0xfa, 0xf9, 0xfa, 0xf9, 0xfa, 0x00, 
	0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 
	// TILE 31
	0xea, 0x0e, 0xb0, 0x32, 0xcc, 0xde, 0x1e, 0xde, 0xde, 0x1e, 0xde, 0xcc, 0x32, 0xb6, 0x0e, 0xee, 
	0xee, 0xe0, 0xd7, 0xa0, 0x8e, 0x5d, 0x00, 0x5d, 0x5d, 0x00, 0x5d, 0x8e, 0xa0, 0xd7, 0xe0, 0xea, 
	// TILE 32
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	// TILE 33
	0xbb, 0x7b, 0x7b, 0xfd, 0x7e, 0xb9, 0xc7, 0xdf, 0xdf, 0xdf, 0xdf, 0x3f, 0xde, 0xed, 0xf3, 0xcb, 
	0xcf, 0xd7, 0xbb, 0xbc, 0x7e, 0xbe, 0xbd, 0xbb, 0x9b, 0x63, 0x78, 0x7e, 0x7e, 0xbe, 0xbd, 0xd3, 
	// TILE 34
	0xab, 0x53, 0x53, 0x85, 0x7a, 0x7d, 0xbd, 0x9d, 0xfd, 0x4d, 0x1b, 0x07, 0x58, 0x65, 0xed, 0xc3, 
	0xc9, 0xd5, 0xb5, 0xa8, 0x6a, 0x96, 0xa8, 0x94, 0x95, 0x65, 0x6a, 0x6a, 0x75, 0xb4, 0xba, 0xd0, 
	// TILE 35
	0x8c, 0x03, 0x3f, 0x07, 0x0b, 0x0d, 0x06, 0x06, 0x04, 0x05, 0x03, 0x0c, 0x1e, 0xd8, 0xc7, 0x0f, 
	0x3f, 0x0f, 0x43, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xc0, 0xe0, 0xe0, 0x00, 0x00, 0x6f, 0x01, 0x1c, 
	// TILE 36
	0x00, 0x03, 0x3f, 0x07, 0x3b, 0x7d, 0x3e, 0x1e, 0x1c, 0xcd, 0xe3, 0xec, 0xde, 0xd8, 0xc7, 0x0f, 
	0x00, 0x0f, 0x43, 0x60, 0x0e, 0x3f, 0x7f, 0x3e, 0x06, 0x60, 0x73, 0x71, 0x77, 0x6f, 0x01, 0x1c, 
	// TILE 37
	0x8c, 0x03, 0x3f, 0x07, 0x3b, 0x7d, 0x3e, 0x1e, 0x1c, 0xcd, 0xe3, 0xec, 0xde, 0xd8, 0xc7, 0x0f, 
	0x3f, 0x0f, 0x43, 0x60, 0x0e, 0x3f, 0x7f, 0x3e, 0x06, 0x60, 0x73, 0x71, 0x77, 0x6f, 0x01, 0x1c, 
	// TILE 38
	0x8c, 0x03, 0x3f, 0x07, 0x3b, 0x7d, 0x3e, 0x1e, 0x1c, 0xcd, 0xe3, 0xec, 0xde, 0xd8, 0xc7, 0x00, 
	0x3f, 0x0f, 0x43, 0x60, 0x0e, 0x3f, 0x7f, 0x3e, 0x06, 0x60, 0x73, 0x71, 0x77, 0x6f, 0x01, 0x00, 
	// TILE 39
	0x00, 0x03, 0x3f, 0x07, 0x3b, 0x7d, 0x3e, 0x1e, 0x1c, 0xcd, 0xe3, 0xec, 0xde, 0xd8, 0xc7, 0x00, 
	0x00, 0x0f, 0x43, 0x60, 0x0e, 0x3f, 0x7f, 0x3e, 0x06, 0x60, 0x73, 0x71, 0x77, 0x6f, 0x01, 0x00, 
	// TILE 40
	0x3b, 0x3b, 0x1b, 0x0d, 0x0e, 0x01, 0xff, 0x57, 0x57, 0xff, 0x07, 0x0f, 0x0e, 0x0d, 0x33, 0xcb, 
	0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x3f, 0x15, 0x15, 0x3f, 0x00, 0x00, 0x00, 0x80, 0xa0, 0xd0, 
	// TILE 41
	0x8c, 0x13, 0x00, 0xff, 0x00, 0x39, 0x3a, 0x3a, 0x38, 0xb9, 0xbb, 0x00, 0xff, 0x00, 0xd7, 0x0f, 
	0x3f, 0x17, 0x00, 0xff, 0x00, 0x3b, 0x3b, 0x3a, 0x3a, 0x38, 0x3b, 0x00, 0x7f, 0x00, 0x11, 0x1c, 
	// TILE 42
	0x8c, 0x03, 0x3f, 0x07, 0x3b, 0x1d, 0xe6, 0xfa, 0xf8, 0xe5, 0x03, 0x6c, 0xde, 0xd8, 0xc7, 0x0f, 
	0x3f, 0x0f, 0x43, 0x60, 0x0c, 0x3a, 0x65, 0x15, 0x15, 0x65, 0x72, 0x70, 0x77, 0x6f, 0x01, 0x1c, 
	// TILE 43
	0xbb, 0x7b, 0x1b, 0xa5, 0x52, 0xa9, 0x54, 0xaa, 0x54, 0xa9, 0x53, 0x87, 0x1e, 0x6d, 0xf3, 0xcb, 
	0xc1, 0xca, 0x95, 0xaa, 0x55, 0x2a, 0x55, 0x2a, 0x55, 0x2a, 0x15, 0x2a, 0x15, 0x8a, 0xa4, 0xd1, 
	// TILE 44
	0x08, 0x14, 0x24, 0xc3, 0x40, 0x40, 0x40, 0x40, 0x20, 0x11, 0x0e, 0x08, 0x10, 0xf0, 0x0e, 0x09, 
	0x44, 0x46, 0x82, 0x81, 0x81, 0x42, 0x42, 0x74, 0x88, 0x88, 0x54, 0x22, 0x21, 0x21, 0x21, 0xf2, 
	// TILE 45
	0xbb, 0x7b, 0x7b, 0xfd, 0x7e, 0xb9, 0xc7, 0xdf, 0xdf, 0xdf, 0xdf, 0x3f, 0xde, 0xed, 0xf3, 0xcb, 
	0x00, 0x03, 0x03, 0x04, 0x0e, 0x0e, 0x0d, 0x0b, 0x0b, 0x03, 0x08, 0x0e, 0x06, 0x06, 0x01, 0x00, 
	// TILE 46
	0x00, 0xfe, 0x80, 0xbe, 0x80, 0xfe, 0x80, 0xbe, 0xbe, 0x80, 0xfe, 0x80, 0xbe, 0x80, 0xfe, 0x00, 
	0x00, 0x7e, 0x42, 0x5a, 0x5a, 0x52, 0x4e, 0x52, 0x52, 0x4e, 0x52, 0x5a, 0x5a, 0x42, 0x7e, 0x00, 
	// TILE 47
	0xc0, 0xde, 0x10, 0x1e, 0x10, 0x1e, 0x10, 0x1e, 0x1e, 0x10, 0x1e, 0x10, 0x1e, 0x10, 0xde, 0xc0, 
	0x00, 0x7e, 0x42, 0x5a, 0x5a, 0x52, 0x4e, 0x52, 0x52, 0x4e, 0x52, 0x5a, 0x5a, 0x42, 0x7e, 0x00, 
	// TILE 48
	0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 
	0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 
	// TILE 49
	0xfd, 0xfa, 0x77, 0xaf, 0xdf, 0xef, 0xf7, 0xfb, 0xfd, 0xfa, 0x77, 0xaf, 0xdf, 0xef, 0xf7, 0xfb, 
	0xfd, 0xfa, 0x77, 0xaf, 0xdf, 0xef, 0xf7, 0xfb, 0xfd, 0xfa, 0x77, 0xaf, 0xdf, 0xef, 0xf7, 0xfb, 
	// TILE 50
	0xfd, 0xfa, 0x77, 0x2f, 0x9f, 0xaf, 0x07, 0xeb, 0xed, 0x02, 0xfb, 0xfb, 0x00, 0xbe, 0x3e, 0x00, 
	0x00, 0x3e, 0x3e, 0x00, 0x4f, 0x2f, 0x40, 0x2b, 0x53, 0x28, 0x54, 0x2a, 0x54, 0x2a, 0x55, 0x00, 
	// TILE 51
	0x00, 0xaa, 0x54, 0xaa, 0x54, 0xaa, 0x14, 0xaa, 0x94, 0x0a, 0xe4, 0xea, 0x00, 0xfa, 0xf8, 0x00, 
	0x00, 0x7a, 0x79, 0x00, 0x7e, 0x7e, 0x00, 0x7f, 0x7f, 0x00, 0x7f, 0x7f, 0x00, 0x7f, 0x7f, 0x00, 
	// TILE 52
	0x00, 0xb6, 0xb6, 0x30, 0xb6, 0x86, 0xb6, 0xb6, 0x30, 0xb6, 0x86, 0xb6, 0xb0, 0x36, 0xb6, 0xb6, 
	0x00, 0x6d, 0x6d, 0x0c, 0x6d, 0x61, 0x6d, 0x6d, 0x0c, 0x6d, 0x61, 0x6d, 0x6d, 0x0c, 0x6d, 0x6d, 
	// TILE 53
	0x86, 0xb6, 0xb6, 0x30, 0xb6, 0x86, 0xb6, 0xb6, 0x30, 0xb6, 0x86, 0xb6, 0xb0, 0x36, 0xb6, 0xb6, 
	0x61, 0x6d, 0x6d, 0x0c, 0x6d, 0x61, 0x6d, 0x6d, 0x0c, 0x6d, 0x61, 0x6d, 0x6d, 0x0c, 0x6d, 0x6d, 
	// TILE 54
	0x86, 0xb6, 0x16, 0xe0, 0x16, 0x16, 0x0a, 0x0a, 0x08, 0x0a, 0x16, 0x16, 0xe0, 0x16, 0xb6, 0xb6, 
	0x61, 0x6d, 0x00, 0x7f, 0x00, 0x80, 0x80, 0xc0, 0xc0, 0xe0, 0xe0, 0x00, 0x7f, 0x00, 0x6d, 0x6d, 
	// TILE 55
	0x86, 0xb6, 0xb6, 0x30, 0xb6, 0x86, 0xb6, 0xb6, 0x30, 0xb6, 0x86, 0xb6, 0xb0, 0x36, 0xb6, 0x00, 
	0x61, 0x6d, 0x6d, 0x0c, 0x6d, 0x61, 0x6d, 0x6d, 0x0c, 0x6d, 0x61, 0x6d, 0x6d, 0x0c, 0x6d, 0x00, 
	// TILE 56
	0x00, 0xaa, 0x54, 0xaa, 0x54, 0xaa, 0x54, 0xaa, 0x54, 0xaa, 0x54, 0xaa, 0x54, 0xaa, 0x54, 0xaa, 
	0x00, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 
	// TILE 57
	0x54, 0xaa, 0x54, 0xaa, 0x54, 0xaa, 0x54, 0xaa, 0x54, 0xaa, 0x54, 0xaa, 0x54, 0xaa, 0x54, 0x00, 
	0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0x00, 
	// TILE 58
	0x86, 0xb6, 0xb6, 0x30, 0xb6, 0x06, 0x96, 0x66, 0x70, 0x86, 0x06, 0xb6, 0xb0, 0x36, 0xb6, 0xb6, 
	0x61, 0x6d, 0x6d, 0x0c, 0x6c, 0x61, 0x6a, 0x62, 0x02, 0x6a, 0x61, 0x6c, 0x6d, 0x0c, 0x6d, 0x6d, 
	// TILE 59
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	// TILE 60
	0x00, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 
	0x00, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 
	// TILE 61
	0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0x00, 
	0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0x00, 
	// TILE 62
	0x54, 0xaa, 0x54, 0xaa, 0x54, 0xaa, 0x54, 0xaa, 0x54, 0xaa, 0x54, 0xaa, 0x54, 0xaa, 0x54, 0xaa, 
	0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 
	// TILE 63
	0x10, 0x30, 0x50, 0x90, 0x50, 0x38, 0x14, 0x13, 0x12, 0x14, 0x38, 0x50, 0x90, 0x50, 0x30, 0x10, 
	0x08, 0x0c, 0x0a, 0x09, 0x0a, 0x1c, 0x28, 0xc8, 0x48, 0x28, 0x1c, 0x0a, 0x09, 0x0a, 0x0c, 0x08
};

RAW_DATA playerMapSprite[] = //128 bytes
{
	// FRAME 00
	0x00, 0x00, 0x00, 0x00, 0x3c, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x3c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x1b, 0x34, 0x05, 0x33, 0x3d, 0x0c, 0x0c, 0x7d, 0x73, 0x01, 0x00, 0x03, 0x03, 0x00, 
	// FRAME 01
	0x00, 0x00, 0x00, 0x00, 0x1c, 0x6e, 0x96, 0xf6, 0xfa, 0x96, 0x6e, 0x1c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x06, 0x06, 0x0a, 0x08, 0x30, 0x22, 0x0e, 0x0e, 0x60, 0x5f, 0x31, 0x2d, 0x31, 0x1f, 0x00, 
	// FRAME 02
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0xf6, 0x96, 0x6f, 0x1f, 0xfe, 0x7c, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x1c, 0x42, 0x70, 0x71, 0x19, 0x02, 0x00, 0x00, 0x00, 0x00, 
	// FRAME 03
	0x00, 0x00, 0x00, 0x7c, 0xfe, 0x1e, 0x6e, 0x97, 0xf7, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x02, 0x19, 0x71, 0x70, 0x42, 0x1c, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00
};

RAW_DATA playerMapSpriteMask[] = //128 bytes
{
	// FRAME 00
	0x00, 0x80, 0x80, 0xbc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xbc, 0x80, 0xff, 0x80, 
	0x00, 0x1f, 0x7f, 0x7f, 0x3f, 0x7f, 0x7f, 0x3f, 0x7f, 0xff, 0xff, 0x77, 0x03, 0x07, 0x07, 0x03, 
	// FRAME 01
	0x00, 0xff, 0x00, 0x3c, 0x7e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xbc, 0x80, 0x80, 0x00, 
	0x07, 0x0f, 0x0f, 0x1f, 0x3f, 0x7f, 0x7f, 0x3f, 0x7f, 0x9f, 0xbf, 0x7f, 0x7f, 0x7f, 0x7f, 0x3f, 
	// FRAME 02
	0x00, 0x00, 0x06, 0x38, 0xc0, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7c, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x3f, 0x7f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x06, 0x00, 0x00, 0x00, 
	// FRAME 03
	0x00, 0x00, 0x7c, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xc0, 0x38, 0x06, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x06, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x7f, 0x3f, 0x00, 0x00, 0x00
};

RAW_DATA playerBattleSprite[] = //63 bytes
{
	0x8f, 0x3f, 0x3f, 0x7f, 0xff, 0xff, 0xc7, 0xbb, 0xdd, 0x5e, 0xbe, 0xbe, 0x7e, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xf9, 0xf7, 0x0f, 
	0xff, 0xfe, 0xfe, 0xfc, 0x81, 0x71, 0x73, 0x03, 0x83, 0x8c, 0x6f, 0x6f, 0x0c, 0x13, 0x17, 0x17, 0x6f, 0x6f, 0x13, 0xfd, 0xfc, 
	0xff, 0xff, 0xff, 0xff, 0xe0, 0xdf, 0xdf, 0xe0, 0xe7, 0x07, 0x38, 0x38, 0x3c, 0xc4, 0xc4, 0xe0, 0xdc, 0xdc, 0xdb, 0xe3, 0xe3
};

RAW_DATA monsterSprites[] = //576 bytes
{
	// FRAME 00
	0x80, 0xc0, 0xe0, 0xe0, 0x70, 0x30, 0x78, 0xfe, 0xbf, 0x1f, 0x1f, 0x0f, 0x8f, 0x0f, 0x6f, 0x4f, 0x0e, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x01, 0x01, 0x00, 0x00, 0xfc, 0x02, 0x3d, 0x7d, 0xfd, 0xe3, 0xf6, 0xdc, 0x89, 0x0b, 0x0e, 0x06, 0x03, 0x81, 0x80, 0x40, 0x20, 0x90, 0x48, 0x3c, 
	0xf8, 0x9c, 0xbe, 0xbf, 0xef, 0x07, 0xfb, 0x9f, 0xbf, 0xaf, 0xe3, 0x04, 0x04, 0x07, 0x07, 0x05, 0x05, 0x04, 0x02, 0x02, 0x01, 0x00, 0x00, 0x00, 
	// FRAME 01
	0x00, 0x00, 0xc0, 0xc0, 0x80, 0xf0, 0xd0, 0xf0, 0xe0, 0xfc, 0x9c, 0x68, 0xd8, 0x90, 0x10, 0xb0, 0xf0, 0x18, 0x0e, 0x03, 0x7f, 0xff, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0xbe, 0xec, 0xc0, 0x83, 0x9e, 0x3f, 0xa1, 0x87, 0x4f, 0x2e, 0x15, 0x0d, 0x03, 0x80, 0x00, 0x00, 0xc0, 0x7c, 0x0f, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x3f, 0x7f, 0xfc, 0xf0, 0xfe, 0x87, 0x80, 0x80, 0xc2, 0xc2, 0xc6, 0xfc, 0xf8, 0xff, 0xf8, 0xfe, 0x83, 0x00, 0x00, 0x00, 0x00, 
	// FRAME 02
	0x70, 0xfc, 0x02, 0x0c, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x8f, 0x5f, 0x7c, 0xf8, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xd0, 0xe0, 0xf0, 0x80, 0xf0, 0xc0, 0x40, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 
	0x00, 0x04, 0x02, 0x01, 0x08, 0x04, 0x23, 0x19, 0x07, 0x03, 0x03, 0x1f, 0x3f, 0x37, 0x73, 0x71, 0x70, 0xb0, 0xb0, 0x20, 0x60, 0x00, 0x01, 0x00, 
	// FRAME 03
	0x80, 0xe0, 0xe0, 0xfc, 0xfc, 0xfc, 0xfc, 0x7e, 0x46, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x9e, 0x1c, 0xfc, 0xf0, 0xf0, 0xe0, 0x80, 0x80, 
	0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xec, 0xc0, 0xe0, 0xf8, 0xe0, 0xc0, 0xf8, 0xf3, 0xcf, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x09, 
	0x00, 0x00, 0x04, 0x0c, 0x0d, 0x1d, 0x1f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3b, 0x3f, 0x3f, 0x3b, 0x1f, 0x0f, 0x03, 0x01, 0x00, 0x00, 0x00, 
	// FRAME 04
	0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x21, 0xd9, 0x41, 0x31, 0x69, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0xdc, 0xe0, 0xf0, 0x8c, 0x02, 0x01, 0x05, 0x95, 0x7f, 0x55, 0x85, 0x01, 0x01, 0x86, 0x78, 0xe0, 0xc0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x0c, 0x80, 0xf8, 0x46, 0x81, 0x00, 0xf8, 0x47, 0x80, 0x80, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 
	// FRAME 05
	0x00, 0x00, 0x00, 0x80, 0xc0, 0x60, 0x30, 0x10, 0x10, 0x98, 0xc8, 0xc8, 0x88, 0x08, 0x08, 0x88, 0xc8, 0xc8, 0x98, 0x30, 0x60, 0xc0, 0x00, 0x00, 
	0x00, 0xc0, 0xf8, 0x0f, 0x00, 0x30, 0x23, 0x02, 0x00, 0x01, 0x73, 0x3a, 0xe1, 0x38, 0xe0, 0x39, 0xe3, 0x72, 0x01, 0x20, 0x30, 0x81, 0xff, 0x00, 
	0x00, 0x1f, 0x70, 0x40, 0x46, 0xc4, 0xc0, 0x40, 0x63, 0x22, 0x28, 0x2c, 0x60, 0x40, 0x48, 0x6c, 0x30, 0x12, 0x33, 0x20, 0x38, 0x1f, 0x00, 0x00, 
	// FRAME 06
	0x00, 0xf8, 0xf8, 0x24, 0xff, 0xdb, 0xfb, 0xfb, 0x23, 0x23, 0xfb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdc, 0xfc, 0x38, 0x20, 0xe0, 0xc0, 0xc0, 0xc0, 0x00, 
	0xc0, 0xf6, 0x36, 0x3f, 0xff, 0xc9, 0x3e, 0x7f, 0x41, 0x81, 0xb9, 0x80, 0x80, 0x80, 0xb8, 0xc1, 0xff, 0x7f, 0xb1, 0xf1, 0x41, 0x40, 0xc0, 0x80, 
	0x7f, 0xff, 0xe2, 0x9e, 0xff, 0xe1, 0xfe, 0xfe, 0x90, 0x83, 0x8f, 0x8d, 0x93, 0xf3, 0xe1, 0x9d, 0xff, 0xfe, 0xe3, 0xff, 0x9c, 0x7c, 0x7f, 0x03, 
	// FRAME 07
	0x00, 0xc0, 0x60, 0x30, 0xd0, 0x10, 0x18, 0x7c, 0xc6, 0x1b, 0x51, 0x43, 0x41, 0x51, 0x1b, 0xc6, 0x7c, 0x18, 0x50, 0x90, 0xb0, 0x60, 0xc0, 0x00, 
	0xf0, 0x1f, 0xc8, 0x05, 0xc8, 0x06, 0xcf, 0x98, 0xf3, 0x05, 0x53, 0x62, 0x92, 0x0b, 0x01, 0xf3, 0x98, 0xcf, 0x06, 0xc8, 0x12, 0xc9, 0x1f, 0xf0, 
	0x01, 0xf9, 0x8d, 0xe5, 0x87, 0xe1, 0x85, 0xe5, 0x89, 0xe3, 0x86, 0xfc, 0xfc, 0x86, 0xe3, 0x89, 0xe9, 0x85, 0xe1, 0x87, 0xe5, 0x8d, 0xf9, 0x01
};

RAW_DATA bossSprites[] = //1152 bytes
{
	// FRAME 00
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x10, 0x08, 0x04, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x04, 0x08, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x10, 0x20, 0xe0, 0x80, 0x00, 0x40, 0x40, 0xc7, 0x8f, 0x8f, 0xc7, 0x80, 0xc6, 0x8f, 0xcf, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x30, 0x90, 0xe0, 0x71, 0x73, 0x62, 0x5e, 0x4c, 0x88, 0x78, 0x69, 0x78, 0x79, 0xf4, 0xeb, 0x08, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf0, 0x1f, 0xc0, 0x3f, 0xff, 0x9a, 0xe9, 0xe5, 0xf5, 0xf5, 0x57, 0xfd, 0xf5, 0xf5, 0x75, 0x3f, 0x1f, 0xe0, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x3f, 0x00, 0xbf, 0x40, 0x00, 0xc1, 0x2d, 0xdf, 0x37, 0x15, 0x37, 0x24, 0x27, 0xf5, 0x1a, 0xea, 0x04, 0x20, 0x5f, 0x40, 0x4f, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x80, 0xc0, 0xff, 0xa0, 0x9d, 0xf2, 0x80, 0x00, 0x00, 0xc0, 0xbf, 0x80, 0xbd, 0xa2, 0xa0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	// FRAME 01
	0x00, 0x00, 0xf8, 0xf8, 0x04, 0x03, 0x03, 0x07, 0x88, 0x38, 0x30, 0x40, 0x80, 0xc0, 0x40, 0xc0, 0x30, 0x30, 0x30, 0x18, 0x18, 0x18, 0x08, 0x08, 0x08, 0x88, 0x08, 0x08, 0x08, 0x08, 0x38, 0xb0, 0x30, 0x30, 0x70, 0x40, 0x40, 0xc0, 0xc0, 0xb0, 0x18, 0x0f, 0x07, 0x03, 0x06, 0x96, 0xf8, 0x00, 
	0x00, 0x00, 0x81, 0x81, 0xf7, 0x18, 0x18, 0x20, 0x38, 0x30, 0x00, 0x00, 0xc0, 0xc0, 0x80, 0x00, 0xc0, 0xc0, 0x00, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0xc1, 0xe2, 0xe2, 0xc2, 0x02, 0x02, 0x00, 0x00, 0xc0, 0xc0, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x03, 0x07, 0x04, 0x38, 0xc7, 0xc7, 0x01, 0x00, 
	0x00, 0xfc, 0x83, 0x83, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xff, 0x7f, 0xff, 0xff, 0x00, 0x7f, 0x3f, 0x00, 0x7f, 0xff, 0xfe, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x78, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0x00, 0x01, 0x02, 0x02, 0x02, 0x01, 0x01, 0xfe, 0x00, 
	0x00, 0xc7, 0x3d, 0x38, 0x00, 0x80, 0x80, 0x00, 0x00, 0x0f, 0x0f, 0xf1, 0x01, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x08, 0x00, 0x00, 0x01, 0x07, 0x07, 0x07, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x07, 0x01, 0x81, 0x81, 0xc1, 0xc1, 0x43, 0x07, 0x00, 0x80, 0x00, 0x80, 0x00, 0xfe, 0xfe, 0x03, 0x00, 
	0x00, 0x03, 0x06, 0x04, 0x9c, 0xf3, 0xf7, 0x1c, 0x80, 0x80, 0x80, 0x01, 0x04, 0x04, 0x38, 0x40, 0x38, 0x1a, 0x00, 0x08, 0x10, 0x30, 0xc0, 0x38, 0x38, 0x84, 0x38, 0x38, 0xf8, 0x38, 0x20, 0x06, 0x0e, 0x3f, 0x3f, 0x1f, 0x03, 0x00, 0x18, 0x1c, 0x73, 0xe7, 0x87, 0x98, 0x07, 0x07, 0x00, 0x00, 
	0x00, 0x1c, 0x1e, 0x12, 0x11, 0x6c, 0x64, 0x62, 0x61, 0x61, 0x61, 0x66, 0x78, 0xfc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc2, 0xc6, 0x7c, 0x6c, 0x6c, 0x10, 0x10, 0x78, 0x6c, 0xe0, 0xe0, 0xc0, 0xc2, 0xc2, 0x82, 0x8c, 0x90, 0xf0, 0x60, 0x60, 0x6c, 0x7d, 0x11, 0x11, 0x12, 0x12, 0x1c, 0x00, 
	// FRAME 02
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x07, 0x16, 0x3c, 0x7c, 0xf0, 0xf0, 0xfe, 0xf7, 0x67, 0xd9, 0x09, 0x42, 0x54, 0x34, 0xf0, 0xf8, 0xff, 0x3e, 0x80, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0xf0, 0x0c, 0x04, 0xc0, 0x0c, 0x48, 0x00, 0x40, 0x80, 0x00, 0x80, 0x00, 
	0xfc, 0xc8, 0xfc, 0xf0, 0xe0, 0xe0, 0xe0, 0xf1, 0xe2, 0xe7, 0xcc, 0x9f, 0x3c, 0x3c, 0xbf, 0x3f, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xf4, 0xf4, 0xff, 0xfe, 0xff, 0xff, 0xfc, 0x1d, 0x07, 0x7d, 0x3d, 0x03, 0x25, 0x30, 0x38, 0x3c, 0x3f, 0x3f, 0xff, 0xf6, 0xff, 0xff, 0xff, 0xb6, 0x1e, 0x0f, 0x06, 
	0x00, 0x01, 0x03, 0x03, 0x07, 0x07, 0x0d, 0x0d, 0x0f, 0x07, 0x0f, 0x3f, 0xdf, 0x3e, 0xfe, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xf1, 0xf8, 0xfc, 0xfe, 0x7f, 0x7f, 0x6f, 0xef, 0x3f, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xff, 0x6f, 0x7e, 0x23, 0x02, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x3e, 0xfd, 0xfa, 0xfa, 0xfd, 0xfb, 0xf5, 0xf5, 0xff, 0xfb, 0xf5, 0xf5, 0xbb, 0x39, 0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x01, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	// FRAME 03
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x20, 0x40, 0xd8, 0xb0, 0xac, 0xd2, 0xf4, 0xbe, 0xba, 0xba, 0x12, 0x52, 0xac, 0xd0, 0x70, 0xd0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0xc0, 0xc0, 0xcc, 0xfc, 0xfb, 0xfb, 0x6f, 0x7b, 0x9e, 0xfe, 0x6e, 0x6f, 0xfd, 0xed, 0xf8, 0xf9, 0xec, 0x6c, 0x65, 0x7d, 0xf9, 0xed, 0x7c, 0x7b, 0x9c, 0xf7, 0xfc, 0x98, 0x40, 0xc0, 0x80, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0xc0, 0xe0, 0x00, 
	0x00, 0xe0, 0xfc, 0xf8, 0xf0, 0xc5, 0xd1, 0x9b, 0x9f, 0x8f, 0xc3, 0x23, 0x01, 0x01, 0x03, 0x07, 0x0e, 0x3e, 0xfe, 0xf0, 0xf9, 0xd9, 0x4f, 0x4f, 0x5a, 0xfb, 0xfc, 0xfc, 0xfc, 0x7e, 0x1f, 0x0e, 0x07, 0x02, 0x03, 0x01, 0x06, 0x07, 0xcf, 0xff, 0xc6, 0xfc, 0x7f, 0xc7, 0xfe, 0xff, 0x01, 0x00, 
	0xf0, 0x9f, 0x7f, 0xff, 0xff, 0xf8, 0xd3, 0xcf, 0x9f, 0x0f, 0x01, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xb0, 0x30, 0x3d, 0x1f, 0x1f, 0x07, 0x37, 0x17, 0x1e, 0x1b, 0x3b, 0xbc, 0xe0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x83, 0x8f, 0x9f, 0x9f, 0xfc, 0x07, 0x05, 0x00, 0x00, 0x00, 
	0x3f, 0xff, 0xfe, 0xfd, 0xff, 0xff, 0xff, 0x7f, 0x6f, 0x40, 0x00, 0x00, 0xc2, 0x4e, 0x9f, 0xbd, 0xff, 0xbe, 0x3e, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x3e, 0xbe, 0x7e, 0xbe, 0xfe, 0x0e, 0x06, 0x00, 0xf0, 0xf0, 0xf9, 0xff, 0xf9, 0xf9, 0xf9, 0xfb, 0xff, 0xfc, 0x7e, 0x00, 0x00, 
};

RAW_DATA finalBoss[] = //432 bytes
{
	0xd1, 0xd3, 0xfa, 0xcf, 0x6a, 0x74, 0xe6, 0xfa, 0xf5, 0xf6, 0xec, 0xfc, 0xb9, 0xcd, 0xdb, 0xed, 0xff, 0xf9, 0x73, 0xe8, 0xc8, 0x99, 0xf4, 0x5c, 0x3a, 0x7f, 0xeb, 0xa3, 0xfc, 0xfe, 0xc7, 0x3b, 0x65, 0xd0, 0xe8, 0xbd, 0xad, 0x6a, 0xc9, 0xff, 0x0e, 0xff, 0xf7, 0xf8, 0xff, 0xfe, 0xfe, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xfd, 0xfc, 0xfd, 0xfd, 0xe9, 0xfc, 0xe9, 0xfc, 0xd4, 0x46, 0xbf, 0xf0, 0x6e, 0x63, 0xe0, 0x9b, 0x25, 0xa0, 0xf3, 0x22, 
	0xff, 0xf7, 0xff, 0xf6, 0x7f, 0xef, 0xff, 0xff, 0xfd, 0xfd, 0xff, 0xfe, 0xfe, 0xff, 0xff, 0xfd, 0xfd, 0xfc, 0xff, 0xf7, 0x8e, 0xfb, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xe7, 0xaf, 0x7f, 0xfc, 0x7f, 0xff, 0xbe, 0xfb, 0xbf, 0xf0, 0xff, 0xdf, 0x7f, 0xff, 0xff, 0xbf, 0xff, 0x3a, 0x78, 0x72, 0xba, 0x7f, 0x7d, 0x7e, 0x38, 0xe6, 0xfb, 0xf7, 0xdf, 0xff, 0xea, 0xf3, 0xed, 0x67, 0xbf, 0xbb, 0xff, 0x78, 0x39, 0xdb, 0xc3, 
	0xef, 0x7f, 0xff, 0xff, 0xf5, 0xef, 0xdf, 0x1f, 0xff, 0xff, 0xbf, 0xff, 0x3c, 0x72, 0xff, 0xf8, 0x7f, 0xfb, 0x7c, 0xfe, 0x76, 0xff, 0xff, 0xff, 0x77, 0xdf, 0xef, 0xf7, 0xf9, 0xfb, 0xfd, 0xfd, 0xff, 0xff, 0xff, 0xfb, 0xf9, 0xfb, 0xff, 0xff, 0x17, 0xff, 0x7f, 0xff, 0xfe, 0xfd, 0xfd, 0x7d, 0xfb, 0x7f, 0x67, 0x77, 0x7f, 0x76, 0xf3, 0xfd, 0xff, 0xff, 0xfd, 0x7f, 0x57, 0xbf, 0xf5, 0xae, 0xf5, 0xa3, 0xa7, 0xcc, 0x26, 0x2c, 0xfb, 0xb2, 
	0xef, 0xf5, 0x7b, 0xff, 0xb7, 0xff, 0xff, 0xff, 0xfe, 0xdc, 0xfb, 0xff, 0xf7, 0xd7, 0xff, 0xb6, 0xb7, 0xe6, 0xf3, 0xf9, 0xff, 0xdf, 0xff, 0xfb, 0xe1, 0xdf, 0xbf, 0x3f, 0xff, 0xff, 0x7f, 0xff, 0xf1, 0xfd, 0xe1, 0xf5, 0xff, 0x77, 0xeb, 0xe9, 0x8c, 0xff, 0xff, 0x5f, 0xf7, 0xfb, 0xfd, 0xfe, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0xff, 0x7e, 0xff, 0xfe, 0xfd, 0x7b, 0x3f, 0xdf, 0xda, 0xfe, 0xf6, 0xe4, 0xf9, 0x73, 0x36, 0x52, 0x8f, 0xab, 0x70, 
	0x49, 0x56, 0x31, 0x4a, 0xfd, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x5f, 0x1f, 0x5f, 0x5f, 0xff, 0x3f, 0x5f, 0x1f, 0xcf, 0xfd, 0xbf, 0xfb, 0xfd, 0xff, 0xf7, 0xde, 0xe6, 0xbd, 0xf1, 0x3f, 0xdb, 0xff, 0xef, 0x4e, 0xef, 0x6e, 0xcc, 0xe6, 0x74, 0xff, 0x5b, 0xbf, 0x7e, 0xf7, 0xef, 0x9f, 0x7f, 0x7f, 0xdf, 0xdf, 0xbe, 0xfb, 0xb8, 0xbc, 0xbf, 0x1e, 0xf9, 0x3f, 0xf3, 0x5f, 0xff, 0x6b, 0x6f, 0x57, 0xfd, 0xdc, 0x95, 0x35, 0x45, 0x68, 0x0b, 
	0x00, 0x47, 0x16, 0x4e, 0xf7, 0x5b, 0x33, 0x5f, 0xbf, 0x7f, 0x37, 0xf7, 0xee, 0xfe, 0xcf, 0xff, 0xc7, 0x7f, 0x46, 0x72, 0x7f, 0x79, 0x27, 0x42, 0x5f, 0x26, 0x3d, 0xbb, 0x5b, 0x5b, 0xef, 0x53, 0x4f, 0xb6, 0x2f, 0x1b, 0xcb, 0x37, 0xf2, 0x0e, 0x37, 0x0f, 0xdf, 0xef, 0x3f, 0x6f, 0xdf, 0xbb, 0x3a, 0xdb, 0x7e, 0x49, 0x63, 0xfb, 0xeb, 0xfb, 0x8b, 0x3b, 0x78, 0x7d, 0x9f, 0xe2, 0xc7, 0x53, 0x9c, 0x6c, 0x7b, 0x81, 0xca, 0x0e, 0x02, 0x00
};

RAW_DATA spellIcons[] = //48 bytes
{
	0x00, 0x30, 0x7c, 0x78, 0x7e, 0x78, 0x20, 0x00,
	0x00, 0x30, 0x7c, 0x7e, 0x7c, 0x30, 0x00, 0x00,
	0x00, 0x3c, 0x6a, 0x56, 0x6a, 0x56, 0x3c, 0x00,
	0x00, 0x4c, 0x52, 0x52, 0x4a, 0x42, 0x3c, 0x00,
	0x00, 0x54, 0x2a, 0x54, 0x2a, 0x54, 0x2a, 0x00,
	0x00, 0x42, 0x18, 0x24, 0x24, 0x18, 0x42, 0x00
};

RAW_DATA font_[] = //230 bytes
{
	0xf8, 0x24, 0x22, 0x24, 0xf8, 
	0xfe, 0x92, 0x92, 0x92, 0x6c, 
	0x7c, 0x82, 0x82, 0x82, 0x44, 
	0xfe, 0x82, 0x82, 0x44, 0x38, 
	0xfe, 0x92, 0x92, 0x92, 0x82, 
	0xfe, 0x12, 0x12, 0x12, 0x02, 
	0x7c, 0x82, 0x92, 0x92, 0x74, 
	0xfe, 0x10, 0x10, 0x10, 0xfe, 
	0x82, 0x82, 0xfe, 0x82, 0x82, 
	0x60, 0x80, 0x82, 0x7e, 0x02, 
	0xfe, 0x30, 0x28, 0x44, 0x82, 
	0xfe, 0x80, 0x80, 0x80, 0x80, 
	0xfe, 0x0c, 0x10, 0x0c, 0xfe, 
	0xfe, 0x0c, 0x10, 0x60, 0xfe, 
	0x7c, 0x82, 0x82, 0x82, 0x7c, 
	0xfe, 0x22, 0x22, 0x22, 0x1c, 
	0x7c, 0x82, 0xa2, 0x42, 0xbc, 
	0xfe, 0x12, 0x32, 0x52, 0x8c, 
	0x4c, 0x92, 0x92, 0x92, 0x64, 
	0x02, 0x02, 0xfe, 0x02, 0x02, 
	0x7e, 0x80, 0x80, 0x80, 0x7e, 
	0x0e, 0x30, 0xc0, 0x30, 0x0e, 
	0x7e, 0x80, 0x70, 0x80, 0x7e, 
	0x82, 0x6c, 0x10, 0x6c, 0x82, 
	0x06, 0x18, 0xf0, 0x18, 0x06, 
	0x82, 0xe2, 0x92, 0x8e, 0x82, 
	0x00, 0x7c, 0x82, 0x7c, 0x00, 
	0x00, 0x84, 0xfe, 0x80, 0x00, 
	0xc4, 0xa2, 0x92, 0x8a, 0x84, 
	0x44, 0x82, 0x92, 0x92, 0x6c, 
	0x1e, 0x10, 0x10, 0xfe, 0x10, 
	0x5e, 0x92, 0x92, 0x92, 0x72, 
	0x7c, 0x92, 0x92, 0x92, 0x60, 
	0x82, 0x62, 0x12, 0x0e, 0x02, 
	0x6c, 0x92, 0x92, 0x92, 0x6c, 
	0x0c, 0x92, 0x92, 0x92, 0x7c, 
	0x20, 0x20, 0x20, 0x20, 0x20, 
	0xbe, 0x00, 0x00, 0x00, 0x00, 
	0x10, 0x10, 0x7c, 0x10, 0x10, 
	0x00, 0x00, 0x0e, 0x00, 0x00, 
	0xa0, 0x60, 0x00, 0x00, 0x00, 
	0xc0, 0xc0, 0x00, 0x00, 0x00, 
	0x0c, 0x02, 0xa2, 0x12, 0x0c, 
	0x80, 0x60, 0x10, 0x0c, 0x02, 
	0x0c, 0x12, 0xec, 0x40, 0xa0, 
	0xfe, 0x82, 0x82, 0x82, 0xfe, 
	0x20, 0x20, 0xfe, 0x20, 0x20, 
	0x3e, 0x6c, 0x84, 0x6c, 0x3e, 
	0x80, 0xc0, 0xc0, 0xfe, 0xfe, 
	0x0c, 0x02, 0xfa, 0x02, 0x0c
};

RAW_DATA bmpKey[] = //4 bytes
{
	0x04, 0x2a, 0x7a, 0x04
};
//END: Bitmaps

//BEGIN: Map Data
RAW_DATA mapOverworld[] = //1062 bytes
{
	0x20,0xa1,0x11,0xfc,0x6f,0xff,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x30,0x00,0x00,
	0x40,0x00,0x00,0x92,0x00,0x04,0x92,0x40,0x04,0x92,0x40,0x04,0x92,0x40,0x50,0x00,
	0xfc,0x9f,0xc2,0xff,0xfd,0xe0,0xe0,0xc0,0xc3,0xcf,0xcf,0x50,0x00,0xfc,0xa0,0x43,
	0xff,0xff,0x07,0x03,0x00,0x80,0xff,0xff,0x54,0x00,0xfc,0xb0,0x84,0x55,0x55,0x55,
	0x55,0x55,0x55,0x50,0x85,0x00,0x01,0x00,0x01,0x55,0x01,0x55,0x01,0x10,0x00,0xfc,
	0xc0,0xc5,0x51,0x11,0xfc,0xd1,0x3f,0x24,0x92,0x49,0x24,0x92,0x49,0x24,0x94,0x49,
	0x24,0x96,0x49,0x24,0x98,0x49,0x24,0x90,0x49,0x24,0x00,0x49,0x20,0x00,0x49,0xa0,
	0x00,0x03,0xff,0xc7,0x3c,0x3f,0x1f,0x0f,0x0f,0x0f,0x06,0x00,0xa0,0x00,0xfc,0xe1,
	0x88,0x10,0xfc,0xff,0xff,0xff,0xff,0x6c,0x00,0xb0,0x00,0xfc,0xf1,0xc9,0x02,0xaa,
	0x0a,0xaa,0x55,0x56,0x55,0x6a,0x55,0x6a,0x55,0x5a,0x51,0x5a,0x01,0x5a,0x50,0x00,
	0x05,0x02,0x0a,0xcf,0xc3,0xc1,0x81,0x81,0x81,0x81,0xe0,0x50,0x00,0x09,0x12,0x4b,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x7f,0x50,0x00,0x0d,0x22,0x8c,0xf0,0xf0,0xf8,
	0xfc,0xfe,0xff,0xff,0xff,0x50,0x00,0x11,0x32,0xcd,0xff,0x7f,0x00,0x00,0x00,0xc0,
	0xfe,0xfe,0x50,0x00,0x15,0x43,0x3f,0x87,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0xf0,
	0xcc,0x1d,0x6f,0xcf,0x00,0x06,0xdb,0x00,0x07,0x2b,0x00,0x07,0xbb,0x00,0x06,0x4b,
	0x01,0x24,0x92,0x09,0x24,0x92,0x49,0x24,0x92,0x49,0x24,0x92,0xb0,0x00,0x23,0xb3,
	0x90,0x81,0x5a,0x81,0x5a,0x85,0x5a,0x95,0x5a,0x55,0x5a,0x55,0x5a,0x55,0x6a,0xaa,
	0xaa,0x50,0x00,0x25,0x73,0xd1,0x80,0x80,0xc0,0xf1,0xff,0xff,0xff,0xff,0x50,0x00,
	0x29,0x84,0x12,0x0f,0x00,0x00,0x00,0x1f,0xff,0xff,0xff,0x50,0x00,0x2d,0x94,0x53,
	0xff,0x3f,0x0f,0x07,0x83,0x81,0x81,0xf8,0x50,0x00,0x31,0xa4,0x94,0xfe,0xfe,0xfe,
	0xfe,0xfe,0xfe,0xfe,0xfe,0x50,0x00,0x35,0xb4,0xff,0x07,0x0f,0x1f,0x3f,0x3f,0x3f,
	0x3f,0x3f,0xb4,0x00,0xfd,0xcf,0xd6,0x0c,0x05,0x04,0x15,0x14,0x55,0x15,0x55,0x15,
	0x55,0x01,0x5a,0x01,0x5a,0x01,0x6a,0x30,0x00,0x39,0xd5,0x7b,0x0f,0x07,0x7f,0x7f,
	0xff,0xff,0xff,0xff,0x50,0x80,0x41,0xfe,0xd8,0x55,0x55,0x55,0x55,0x55,0x55,0x55,
	0x55,0x55,0x55,0x55,0x50,0x55,0x40,0x55,0x42,0x51,0x51,0x46,0x05,0xd9,0x24,0x92,
	0x49,0x24,0x92,0x49,0x25,0x12,0x49,0x26,0x12,0x49,0x26,0x92,0x49,0x00,0x00,0x00,
	0x00,0x00,0x00,0x60,0x00,0x00,0x50,0x00,0x4a,0x16,0x1a,0xf8,0xf8,0xf1,0xc1,0x81,
	0x03,0x03,0x07,0x50,0x80,0x4e,0x26,0x5b,0x55,0x54,0x55,0x54,0x55,0x54,0x55,0x40,
	0x55,0x00,0x54,0x00,0x54,0x00,0x54,0x02,0x50,0x40,0x52,0x36,0xbf,0x05,0x55,0x05,
	0x55,0x05,0x55,0x01,0x55,0x00,0x55,0x00,0x15,0x00,0x15,0x80,0x15,0xb0,0x00,0x56,
	0x4f,0xdd,0x01,0x5a,0x05,0x56,0x05,0x5a,0x05,0x5a,0x15,0x6a,0x15,0x5a,0x15,0x5a,
	0x15,0x5a,0x30,0x00,0x5a,0x57,0x1e,0xff,0xff,0xff,0xff,0xff,0xf0,0xc0,0xc0,0x30,
	0x00,0xee,0x67,0x5f,0xff,0xfe,0xf8,0xf0,0x80,0x00,0x1e,0x3f,0x70,0x08,0x5e,0x77,
	0xa0,0x55,0x43,0x55,0x40,0x55,0x40,0x55,0x68,0x55,0x68,0x55,0x68,0x6a,0xa8,0xaa,
	0xa8,0x50,0x04,0x62,0x87,0xe1,0x80,0x00,0x00,0x00,0x00,0x00,0x15,0x55,0x15,0x55,
	0x15,0x55,0x15,0x55,0x15,0x55,0x50,0x00,0x66,0x98,0x22,0x1f,0x3f,0xff,0xff,0xff,
	0xff,0xff,0xff,0x50,0x08,0x6a,0xa8,0x63,0x54,0x02,0x54,0x00,0x54,0x00,0x55,0x00,
	0x55,0x40,0x55,0x55,0x55,0x55,0x55,0x55,0x50,0x04,0x6e,0xb8,0xbf,0x80,0x15,0x00,
	0x15,0x00,0x15,0x00,0x55,0x01,0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x30,0x00,0x73,
	0xff,0xe5,0xc0,0xc0,0xc1,0xff,0xff,0xff,0xff,0xff,0x30,0x00,0x76,0xc9,0x26,0x00,
	0x03,0xff,0xff,0xff,0xff,0xff,0xff,0x10,0x00,0x7a,0xd9,0x67,0xd0,0x00,0x7e,0xe9,
	0xa8,0xaa,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,0xa8,0xaa,0xa9,0xaa,0xa9,0xaa,0xa9,0xaa,
	0xa9,0xe0,0x22,0x82,0xf9,0xe9,0x24,0x92,0x49,0x24,0x92,0x49,0x24,0x92,0x49,0x60,
	0x00,0x03,0x24,0x25,0x12,0x24,0x24,0x12,0x24,0x24,0x12,0x24,0x24,0x12,0x18,0x00,
	0x87,0x0a,0x2a,0xff,0xff,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x08,0x00,0x8b,0x1a,0x6b,
	0x18,0x00,0x8f,0x2a,0xbf,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x10,0x00,0x97,
	0x4f,0xed,0xf6,0x00,0x9b,0x5b,0x2e,0x75,0xb6,0xdb,0x65,0xb6,0xdb,0x64,0x00,0x00,
	0x64,0x04,0x90,0x64,0x24,0x92,0x64,0x25,0x12,0x64,0x24,0x92,0x64,0x04,0x90,0xd0,
	0x02,0x9f,0x6b,0x6f,0xaa,0xa1,0xaa,0xa1,0x2a,0xa1,0x00,0x21,0x15,0x21,0xd5,0x00,
	0x15,0x15,0x15,0xd5,0xe0,0x20,0xa3,0x7b,0xb0,0x52,0x8a,0x52,0x8a,0x50,0xc0,0x52,
	0xa8,0x52,0xa8,0xc0,0x0c,0x54,0x28,0x54,0x28,0x18,0x00,0xa7,0x8b,0xf1,0x0f,0x0f,
	0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x08,0x00,0xab,0x9c,0x32,0x18,0xcc,0xaf,0xac,0x7f,
	0x24,0x90,0x00,0x24,0x90,0x00,0x25,0x30,0x00,0x26,0x50,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc1,0x11,0xff,0xff,0xf4,0x00,0x20,0x00,
	0x00,0x30,0x00,0x00,0x40,0x00,0x00,0x92,0x00,0x04,0x92,0x49,0x04,0x92,0x49,0x00,
	0x92,0x49,0x00,0x00,0x00,0xd2,0xcc,0xb3,0xfc,0xf5,0x4d,0x24,0x92,0x24,0xa4,0x92,
	0x24,0xa4,0x92,0x24,0xa5,0x2a,0x24,0xa5,0xb8,0x24,0x92,0x48,0x24,0x92,0x48,0x00,
	0x00,0x00,0xd0,0x22,0xb7,0xfd,0x36,0x44,0x00,0x00,0x4c,0x00,0x00,0x24,0x92,0x49,
	0x24,0x92,0x49,0x00,0x00,0x18,0x24,0x90,0x49,0x24,0x98,0x49,0x00,0x00,0x00,0xc0,
	0x22,0xbb,0xfd,0x77,0x15,0x00,0x20,0x00,0x15,0x55,0x15,0x55,0x00,0x00,0x55,0xd5,
	0x55,0x15,0x00,0x00,0xf0,0x22,0xbf,0xfd,0xb8,0x02,0x00,0x90,0x00,0x90,0x90,0x20,
	0x9a,0x90,0x20,0x90,0x90,0x80,0x90,0x90,0x20,0x90,0x00,0x20,0x90,0xdb,0x00,0x00,
	0xdb,0x1c,0x00,0xc3,0xfd,0xf9,0x00,0x55,0x00,0x55,0x00,0x55,0x00,0x59,0x00,0x55,
	0x00,0x55,0x00,0x00,0x00,0x00,0x18,0x00,0xc7,0xfe,0x3a,0xff,0xff,0xff,0xff,0xff,
	0xff,0x00,0x00,0x19,0x11,0xcb,0xfe,0x7f,0x00,0x20,0x00,0x00,0x30,0x00,0x24,0xc0,
	0x00,0x24,0x90,0x00,0x24,0x90,0x00,0x24,0x90,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x10,0x00,0x3d,0xe5,0x97
};

RAW_DATA mapMainCastle[] = //176 bytes
{
	0x41,0xd1,0x84,0xfc,0x3f,0xc1,0x00,0x00,0x04,0x00,0x00,0x04,0x00,0x00,0x04,0x92,
	0x49,0x24,0x95,0x24,0xac,0x85,0xb6,0xcc,0x85,0x24,0x8c,0x85,0xb6,0xcc,0x60,0x84,
	0xfc,0x40,0x02,0xaa,0xaa,0xff,0xfe,0x01,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,
	0x02,0x00,0x02,0xd7,0x94,0xfc,0x50,0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x66,0x66,0x66,0x66,0x88,0x86,0x28,0x86,0x11,0x16,0x53,0x46,
	0x10,0x16,0x11,0x76,0x11,0x16,0x11,0x16,0x48,0xcd,0x03,0xff,0xc4,0x40,0x24,0x92,
	0x40,0x47,0x6a,0x40,0x01,0xb2,0x40,0x01,0xb2,0x5b,0x00,0x01,0x5b,0x00,0x00,0x49,
	0x24,0x92,0x96,0xdb,0x6d,0x48,0x8e,0x07,0xf0,0xc5,0x49,0x04,0x92,0x92,0x87,0x22,
	0x00,0x00,0x02,0x00,0x00,0x02,0x00,0x00,0x01,0x00,0x00,0x00,0x49,0x00,0x92,0x92,
	0x80,0xe4,0x40,0xbe,0x0b,0xf1,0x3f,0x20,0x92,0x41,0xc2,0x55,0x81,0x01,0x86,0x01,
	0x00,0x00,0x01,0x01,0x86,0x01,0x00,0x00,0x01,0x24,0x92,0x49,0xb6,0xdb,0x6e
};

RAW_DATA mapTown[] = //68 bytes (265 bytes for all 4 towns)
{
	0x61,0xd1,0x8e,0xff,0xff,0xc1,0x02,0x49,0x24,0x02,0x24,0x92,0x02,0x36,0xdb,0x02,
	0x12,0x49,0x02,0x49,0x09,0x02,0xed,0xc9,0x00,0x92,0x49,0x02,0x49,0x24,0xd7,0xfe,
	0xff,0xf0,0x3f,0x66,0x66,0x66,0x66,0x22,0x26,0x2b,0xb6,0x55,0x56,0x53,0x46,0x11,
	0x16,0x11,0x96,0x66,0x66,0x61,0x66,0xa7,0xb8,0xc1,0xa6,0x11,0x11,0x11,0x06,0x66,
	0x66,0x66,0x66
};

RAW_DATA mapCastle[] = //39 bytes (108 bytes for all 4 castles)
{
	0x41,0xf1,0x9f,0xff,0xff,0xff,0x55,0x55,0x55,0x55,0x53,0x88,0x88,0x35,0x54,0x62,
	0x06,0x45,0x51,0x11,0x11,0x15,0x5a,0xa1,0x1a,0xa5,0x5a,0xa1,0x1a,0xa5,0x55,0x51,
	0x15,0x55,0x78,0x81,0x18,0x89
};

RAW_DATA mapTower[] = //406 bytes (776 bytes for all 5 towers)
{
	0x83,0xe5,0x24,0xfc,0x2f,0xc1,0x00,0x0c,0xeb,0x03,0x58,0x49,0x1a,0x12,0x49,0xd0,
	0x92,0x49,0xc4,0x92,0x49,0x84,0x92,0x49,0x24,0x92,0x49,0x44,0x92,0x49,0xec,0x28,
	0xfc,0x30,0x3f,0x96,0x60,0x00,0x04,0xbb,0x80,0x24,0x92,0xf0,0x24,0x92,0x5e,0x24,
	0x92,0x4e,0x24,0x92,0x4b,0x24,0x92,0x4a,0x24,0x92,0x49,0xe4,0x66,0x03,0xff,0xc3,
	0xff,0xff,0xff,0x75,0xd7,0x5b,0x24,0x92,0x49,0x84,0xa2,0x49,0xc4,0x92,0x49,0x10,
	0x92,0x49,0x02,0x12,0x49,0x00,0x7f,0xe1,0xe4,0xae,0x07,0xf0,0xbf,0x88,0x88,0x88,
	0x88,0x67,0x35,0x35,0x35,0x67,0x11,0x10,0x11,0x67,0x12,0x11,0x14,0x67,0x11,0x11,
	0x16,0x67,0x11,0x11,0x40,0x67,0x11,0x14,0x00,0x60,0x88,0x80,0x00,0xf5,0x6e,0xfc,
	0x6f,0xc5,0x00,0x00,0x94,0x78,0x00,0x97,0x51,0x18,0x09,0x51,0x11,0x18,0x95,0x11,
	0x11,0x18,0x91,0x12,0x11,0x18,0x0a,0xa6,0x11,0x18,0x47,0x89,0x11,0x18,0x31,0x89,
	0x11,0x18,0xfc,0xee,0xfc,0x71,0x3f,0xa8,0x59,0x00,0x00,0xa1,0x14,0x89,0x00,0xa1,
	0x11,0x14,0x90,0xa1,0x12,0x11,0x49,0xa1,0x11,0x11,0x19,0xa1,0x11,0x11,0x14,0xa1,
	0x11,0x11,0x13,0x0b,0xb7,0x16,0xbb,0xf5,0xee,0x13,0xff,0xc7,0x12,0x9a,0x11,0x19,
	0xbb,0x0a,0x11,0x19,0xa4,0x85,0x11,0x19,0xa1,0x13,0x11,0x19,0xa1,0x11,0x6b,0xb0,
	0x07,0x11,0x9a,0x48,0x00,0x71,0x9a,0x11,0x00,0x0b,0x0a,0x21,0xd7,0xae,0x17,0xf1,
	0xbf,0x00,0x00,0xa0,0x00,0x93,0x73,0x43,0x73,0x91,0x11,0x11,0x11,0x91,0x12,0x11,
	0x16,0x91,0x11,0x11,0x18,0x51,0x11,0x11,0x60,0x11,0x11,0x16,0x00,0x11,0x16,0xa0,
	0x00,0xdd,0x3d,0xfc,0xaf,0xc9,0x00,0x00,0x06,0x46,0x00,0x00,0x07,0x77,0x09,0x64,
	0x87,0xa7,0x95,0x11,0x87,0x77,0x91,0x12,0x80,0x70,0x51,0x11,0x38,0x79,0x11,0x11,
	0x18,0x79,0x11,0x11,0x18,0x79,0xdd,0x2c,0xfc,0xb2,0x3f,0x84,0x67,0x00,0x00,0x81,
	0x13,0x67,0x00,0x81,0x11,0x13,0x70,0x81,0x12,0x11,0x37,0x81,0x11,0x11,0x17,0x51,
	0x11,0x11,0x13,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0xd0,0x5e,0x23,0xff,0xcb,
	0x28,0x93,0x66,0x24,0x93,0x66,0x24,0x93,0x66,0x64,0x93,0x66,0xc4,0x93,0x66,0x0c,
	0x93,0x66,0x01,0x93,0x66,0x00,0x7e,0x10,0xc0,0x8a,0x27,0xf2,0xbf,0x24,0x92,0x49,
	0x24,0x92,0x49,0x24,0x92,0x49,0x24,0x92,0x4a,0x24,0x82,0x4b,0x24,0x92,0x50,0x24,
	0x92,0x80,0x92,0x48,0x00
};

RAW_DATA mapCave[] = //126 bytes (+33 bytes for events)
{
	0xa2,0xe4,0xb4,0xff,0xff,0xff,0x75,0xd7,0x5d,0x24,0x92,0x49,0x27,0x00,0x49,0x24,
	0x00,0x11,0x20,0x00,0x01,0x20,0x00,0x01,0x20,0x00,0x01,0x80,0x00,0x07,0xe4,0x64,
	0xfc,0x2f,0xff,0x75,0xd7,0x5c,0x24,0x92,0x49,0x29,0x00,0x00,0x28,0x00,0x00,0x20,
	0x00,0x00,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xde,0x48,0x07,0xff,0xff,
	0xc0,0x00,0x02,0x20,0x00,0x01,0x2e,0x49,0x29,0x3f,0xff,0xf9,0x3f,0xff,0xf9,0x3f,
	0xff,0xf9,0x3f,0xff,0xf9,0x24,0x92,0x49,0xed,0xb4,0xff,0xff,0xff,0x74,0x74,0x74,
	0x07,0x11,0x11,0x11,0x06,0x10,0x00,0x01,0x01,0x13,0x74,0x01,0x01,0x11,0x11,0x01,
	0x01,0x82,0x81,0x01,0x01,0x11,0x11,0x01,0x51,0x90,0x00,0x01,0x11
};
//END: Map Data

//BEGIN: Map Events
/*
EVENTS:
2 bytes
	- 1 bit button activated
	- 6 bits chunkID
	- 3 bits x-coordinate
	- 3 bits y-coordinate
	- 3 bits event type
2 bytes - event parameters

Event Types:

000 Teleport:
	- 4 bits mapID
	- 6 bits chunkID
	- 3 bits x-coordinate
	- 3 bits y-coordinate

001 Inn:
	- 1 byte price (4.4 format, cost = (hp * (price) + 1) >> 4)
	- 1 byte unused

010 Shop:
	- 1 byte itemID
	- 1 byte unused

011 Large Chest:
	- 1 bytes
		- 3 bits unused
		- 5 bits chestID
	- 1 bit item=0x8? spell=x0x0?
		Item
		- 4 bits unused
		- 3 bits item type
		Spell
		- 3 bit unused
		- 4 bits id

100 Message:
	- 1 byte messageID
	- 1 byte add key

101 Boss Battle:
	- 1 byte bossID
	- 1 byte seal
*/

RAW_DATA mapOverworldEvents[] = //89 bytes
{
	21,
	//Teleport to Main Castle (Left)
	//0 011111 111 000 000
	//0001 000100 011 111
	0x3F,0xC0,0x11,0x1F,
	//Teleport to Main Castle (Right)
	//0 100000 000 000 000
	//0001 000100 100 111
	0x40,0x00,0x11,0x27,
	//Teleport to Town 1
	//0 000011 100 011 000
	//0010 000000 010 110
	0x07,0x18,0x20,0x16,
	//Teleport to Castle 1 (Left)
	//0 100010 111 000 000
	//0011 000000 011 111
	0x45,0xC0,0x30,0x1F,
	//Teleport to Castle 1 (Right)
	//0 100011 000 000 000
	//0011 000000 100 111
	0x46,0x00,0x30,0x27,
	//Teleport to Tower 1
	//0 000101 100 100 000
	//0100 000010 111 111
	0x0B,0x20,0x40,0xBF,
	//Teleport to Town 2
	//0 010101 010 000 000
	//0101 000000 010 110
	0x2A,0x80,0x50,0x16,
	//Teleport to Castle 2 (Left)
	//0 001110 101 010 000
	//0110 000000 011 111
	0x1D,0x50,0x60,0x1F,
	//Teleport to Castle 2 (Right)
	//0 001110 110 010 000
	//0110 000000 100 111
	0x1D,0x90,0x60,0x27,
	//Teleport to Tower 2
	//0 000000 011 011 000
	//0111 000010 111 111
	0x00,0xD8,0x70,0xBF,
	//Teleport to Town 3
	//0 101101 101 101 000
	//1000 000000 010 110
	0x5B,0x68,0x80,0x16,
	//Teleport to Cave (Entrance)
	//0 101101 001 000 000
	//1001 000000 111 111
	0x5A,0x40,0x90,0x3F,
	//Teleport to Cave (Exit)
	//0 110100 001 000 000
	//1001 000011 000 111
	0x68,0x40,0x90,0xC7,
	//Teleport to Castle 3 (Left)
	//0 110100 101 100 000
	//1010 000000 011 111
	0x69,0x60,0xA0,0x1F,
	//Teleport to Castle 3 (Right)
	//0 110100 110 100 000
	//1010 000000 100 111
	0x69,0xA0,0xA0,0x27,
	//Teleport to Tower 3
	//0 110011 011 010 000
	//1011 000010 111 111
	0x66,0xD0,0xB0,0xBF,
	//Teleport to Town 4
	//0 111000 110 011 000
	//1100 000000 010 110
	0x71,0x98,0xC0,0x16,
	//Teleport to Castle 4 (Left)
	//0 110010 010 011 000
	//1101 000000 011 111
	0x64,0x98,0xD0,0x1F,
	//Teleport to Castle 4 (Right)
	//0 110010 011 011 000
	//1101 000000 100 111
	0x64,0xD8,0xD0,0x27,
	//Teleport to Tower 4
	//0 111010 011 010 000
	//1110 000010 111 111
	0x74,0xD0,0xE0,0xBF,
	//Teleport to Tower 5
	//0 011000 010 100 000
	//1111 000010 111 111
	0x30,0xA0,0xF0,0xBF
};

RAW_DATA mapMainCastleEvents[] =
{
	14,
	//Teleport to Overworld (Left)
	//0 000100 011 111 000
	//0000 011111 111 000
	0x08,0xF8,0x07,0xF8,
	//Teleport to Overworld (Right)
	//0 000100 100 111 000
	//0000 100000 000 000
	0x09,0x38,0x08,0x00,
	//Inn
	//1 000010 101 101 001
	0x85,0x69,0x00,0x00,
	//Shop Potion
	//1 000000 010 110 010
	0x80,0xB2,0x00,0x00,
	//Shop S-Potion
	//1 000000 011 110 010
	0x80,0xF2,0x01,0x00,
	//Shop X-Potion
	//1 000000 100 110 010
	0x81,0x32,0x02,0x00,
	//Shop Ether
	//1 000000 101 110 010
	0x81,0x72,0x03,0x00,
	//Shop S-Ether
	//1 000000 010 100 010
	0x80,0xA2,0x04,0x00,
	//Shop X-Ether
	//1 000000 011 100 010
	0x80,0xE2,0x05,0x00,
	//Shop Elixir
	//1 000000 100 100 010
	0x81,0x22,0x06,0x00,
	//Shop X-Elixir
	//1 000000 101 100 010
	0x81,0x62,0x07,0x00,
	//Large Chest #0 (CURE)
	//1 000010 001 110 011
	0x84,0x73,0x00,0x00,
	//King
	//1 000001 011 010 100
	0x82,0xD4,0x00,0x00,
	//Inn Bookshelf #1
	//1 000010 100 100 100
	0x85,0x24,0x05,0x00
};

RAW_DATA mapTown1Events[]
{
	13,
	//Teleport to Overworld
	//0 000000 010 110 000
	//0000 000011 100 011
	0x00,0xB0,0x00,0xE3,
	//Inn
	//1 000001 101 010 001
	0x83,0x51,0x00,0x00,
	//Shop Potion
	//1 000000 011 001 010
	0x80,0xCA,0x00,0x00,
	//Shop S-Potion
	//1 000000 100 001 010
	0x81,0x0A,0x01,0x00,
	//Shop X-Potion
	//1 000000 101 001 010
	0x81,0x4A,0x02,0x00,
	//Shop Ether
	//1 000000 110 001 010
	0x81,0x8A,0x03,0x00,
	//Shop S-Ether
	//1 000000 111 001 010
	0x81,0xCA,0x04,0x00,
	//Shop X-Ether
	//1 000001 000 001 010
	0x82,0x0A,0x05,0x00,
	//Shop Elixir
	//1 000001 001 001 010
	0x82,0x4A,0x06,0x00,
	//Shop X-Elixir
	//1 000001 010 001 010
	0x82,0x8A,0x07,0x00,
	//Large Chest #1 (SWORD)
	//1 000001 110 110 011
	0x83,0xB3,0x01,0x80,
	//Inn Bookshelf #2
	//1 000001 100 001 100
	0x83,0x0C,0x06,0x00
};

RAW_DATA mapCastle1Events[] =
{
	4,
	//Teleport to Overworld (Left)
	//0 000000 011 111 000
	//0000 100010 111 000
	0x00,0xF8,0x08,0xB8,
	//Teleport to Overworld (Right)
	//0 000000 100 111 000
	//0000 100011 000 000
	0x01,0x38,0x08,0xC0,
	//King
	//1 000000 011 010 100
	0x80,0xD4,0x01,0x20,
	//Large Chest #2 (ARMOR)
	//1 000000 100 010 011
	0x81,0x13,0x02,0x81
};

RAW_DATA mapTower1Events[] =
{
	23,
	//Teleport to Overworld
	//0 000010 111 111 000
	//0000 000101 100 100
	0x05,0xF8,0x01,0x64,
	//Stairs 1 (Up)
	//0 000010 011 011 000
	//0100 000110 011 011
	0x04,0xD8,0x41,0x9B,
	//Stairs 1 (Down)
	//0 000110 011 011 000
	//0100 000010 011 011
	0x0C,0xD8,0x40,0x9B,
	//Stairs 2 (Up)
	//0 000100 011 100 000
	//0100 001000 011 100
	0x08,0xE0,0x42,0x1C,
	//Stairs 2 (Down)
	//0 001000 011 100 000
	//0100 000100 011 100
	0x10,0xE0,0x41,0x1C,
	//Stairs 3 (Down)
	//0 001010 001 000 000
	//0100 000110 001 000
	0x14,0x40,0x41,0x88,
	//Stairs 3 (Up)
	//0 000110 001 000 000
	//0100 001010 001 000
	0x0C,0x40,0x42,0x88,
	//Stairs 4 (Down)
	//0 000100 000 111 000
	//0100 000000 000 111
	0x08,0x38,0x40,0x07,
	//Stairs 4 (Up)
	//0 000000 000 111 000
	//0100 000100 000 111
	0x00,0x38,0x41,0x07,
	//Stairs 5 (Up)
	//0 000001 111 110 000
	//0100 000101 111 110
	0x03,0xF0,0x41,0x7E,
	//Stairs 5 (Down)
	//0 000101 111 110 000
	//0100 000001 111 110
	0x0B,0xF0,0x40,0x7E,
	//Stairs 6 (Up)
	//0 000101 011 011 000
	//0100 001001 011 011
	0x0A,0xD8,0x42,0x5B,
	//Stairs 6 (Down)
	//0 001001 011 011 000
	//0100 000101 011 011
	0x12,0xD8,0x41,0x5B,
	//Passage (Down)
	//0 000101 100 111 000
	//0100 000111 100 001
	0x0B,0x38,0x41,0xE1,
	//Passage (Up)
	//0 000111 100 001 000
	//0100 000101 100 111
	0x0F,0x08,0x41,0x67,
	//Stairs 7 (Down)
	//0 000111 011 011 000
	//0100 000011 011 011
	0x0E,0xD8,0x40,0xDB,
	//Stairs 7 (Up)
	//0 000011 011 011 000
	//0100 000111 011 011
	0x06,0xD8,0x41,0xDB,
	//Stairs 8 (Up)
	//0 000110 110 111 000
	//0100 001010 110 111
	0x0D,0xB8,0x42,0xB7,
	//Stairs 8 (Down)
	//0 001010 110 111 000
	//0100 000110 110 111
	0x15,0xB8,0x41,0xB7,
	//Large Chest #3 (BOOTS)
	//1 000001 000 001 011
	0x82,0x0B,0x03,0x82,
	//Large Chest #4 (CHARM)
	//1 001011 011 100 011
	0x96,0xE3,0x04,0x83,
	//Large Chest #5 (FIRE)
	//1 000011 101 010 011
	0x87,0x53,0x05,0x02,
	//Boss #1 (ID=0 Seal=2)
	//0 001000 110 010 101
	0x11,0x95,0x00,0x02
};

RAW_DATA mapTown2Events[] =
{
	13,
	//Teleport to Overworld
	//0 000000 010 110 000
	//0000 010101 010 000
	0x00,0xB0,0x05,0x50,
	//Inn
	//1 000001 101 011 001
	0x83,0x51,0x00,0x00,
	//Shop Potion
	//1 000000 011 001 010
	0x80,0xCA,0x00,0x00,
	//Shop S-Potion
	//1 000000 100 001 010
	0x81,0x0A,0x01,0x00,
	//Shop X-Potion
	//1 000000 101 001 010
	0x81,0x4A,0x02,0x00,
	//Shop Ether
	//1 000000 110 001 010
	0x81,0x8A,0x03,0x00,
	//Shop S-Ether
	//1 000000 111 001 010
	0x81,0xCA,0x04,0x00,
	//Shop X-Ether
	//1 000001 000 001 010
	0x82,0x0A,0x05,0x00,
	//Shop Elixir
	//1 000001 001 001 010
	0x82,0x4A,0x06,0x00,
	//Shop X-Elixir
	//1 000001 010 001 010
	0x82,0x8A,0x07,0x00,
	//Large Chest #6 (SWORD)
	//1 000001 110 110 011
	0x83,0xB3,0x06,0x80,
	//Inn Bookshelf #3
	//1 000001 100 001 100
	0x83,0x0C,0x07,0x00
};

RAW_DATA mapCastle2Events[] =
{
	4,
	//Teleport to Overworld (Left)
	//0 000000 011 111 000
	//0000 001110 101 010
	0x00,0xF8,0x03,0xAA,
	//Teleport to Overworld (Right)
	//0 000000 100 111 000
	//0000 001110 110 010
	0x01,0x38,0x03,0xB2,
	//King
	//1 000000 011 010 100
	0x80,0xD4,0x02,0x10,
	//Large Chest #7 (ARMOR)
	//1 000000 100 010 011
	0x81,0x13,0x07,0x81
};

RAW_DATA mapTower2Events[] =
{
	23,
	//Teleport to Overworld
	//0 000010 111 111 000
	//0000 000000 011 011
	0x05,0xF8,0x00,0x1B,
	//Stairs 1 (Up)
	//0 000010 011 011 000
	//0111 000110 011 011
	0x04,0xD8,0x71,0x9B,
	//Stairs 1 (Down)
	//0 000110 011 011 000
	//0111 000010 011 011
	0x0C,0xD8,0x70,0x9B,
	//Stairs 2 (Up)
	//0 000100 011 100 000
	//0111 001000 011 100
	0x08,0xE0,0x72,0x1C,
	//Stairs 2 (Down)
	//0 001000 011 100 000
	//0111 000100 011 100
	0x10,0xE0,0x71,0x1C,
	//Stairs 3 (Down)
	//0 001010 001 000 000
	//0111 000110 001 000
	0x14,0x40,0x71,0x88,
	//Stairs 3 (Up)
	//0 000110 001 000 000
	//0111 001010 001 000
	0x0C,0x40,0x72,0x88,
	//Stairs 4 (Down)
	//0 000100 000 111 000
	//0111 000000 000 111
	0x08,0x38,0x70,0x07,
	//Stairs 4 (Up)
	//0 000000 000 111 000
	//0111 000100 000 111
	0x00,0x38,0x71,0x07,
	//Stairs 5 (Up)
	//0 000001 111 110 000
	//0111 000101 111 110
	0x03,0xF0,0x71,0x7E,
	//Stairs 5 (Down)
	//0 000101 111 110 000
	//0111 000001 111 110
	0x0B,0xF0,0x70,0x7E,
	//Stairs 6 (Up)
	//0 000101 011 011 000
	//0111 001001 011 011
	0x0A,0xD8,0x72,0x5B,
	//Stairs 6 (Down)
	//0 001001 011 011 000
	//0111 000101 011 011
	0x12,0xD8,0x71,0x5B,
	//Passage (Down)
	//0 000101 100 111 000
	//0111 000111 100 001
	0x0B,0x38,0x71,0xE1,
	//Passage (Up)
	//0 000111 100 001 000
	//0111 000101 100 111
	0x0F,0x08,0x71,0x67,
	//Stairs 7 (Down)
	//0 000111 011 011 000
	//0111 000011 011 011
	0x0E,0xD8,0x70,0xDB,
	//Stairs 7 (Up)
	//0 000011 011 011 000
	//0111 000111 011 011
	0x06,0xD8,0x71,0xDB,
	//Stairs 8 (Up)
	//0 000110 110 111 000
	//0111 001010 110 111
	0x0D,0xB8,0x72,0xB7,
	//Stairs 8 (Down)
	//0 001010 110 111 000
	//0111 000110 110 111
	0x15,0xB8,0x71,0xB7,
	//Large Chest #8 (BOOTS)
	//1 000001 000 001 011
	0x82,0x0B,0x08,0x82,
	//Large Chest #9 (AQUA)
	//1 001011 011 100 011
	0x96,0xE3,0x09,0x03,
	//Large Chest #10 (IMMUNE FIRE)
	//1 000011 101 010 011
	//101011000 010
	0x87,0x53,0x0A,0xC2,
	//Boss #2 (ID=1 Seal=1)
	//0 001000 110 010 101
	0x11,0x95,0x01,0x01
};

RAW_DATA mapTown3Events[] =
{
	13,
	//Teleport to Overworld
	//0 000000 010 110 000
	//0000 101101 101 101
	0x00,0xB0,0x0B,0x6D,
	//Inn
	//1 000001 101 011 001
	0x83,0x51,0x00,0x00,
	//Shop Potion
	//1 000000 011 001 010
	0x80,0xCA,0x00,0x00,
	//Shop S-Potion
	//1 000000 100 001 010
	0x81,0x0A,0x01,0x00,
	//Shop X-Potion
	//1 000000 101 001 010
	0x81,0x4A,0x02,0x00,
	//Shop Ether
	//1 000000 110 001 010
	0x81,0x8A,0x03,0x00,
	//Shop S-Ether
	//1 000000 111 001 010
	0x81,0xCA,0x04,0x00,
	//Shop X-Ether
	//1 000001 000 001 010
	0x82,0x0A,0x05,0x00,
	//Shop Elixir
	//1 000001 001 001 010
	0x82,0x4A,0x06,0x00,
	//Shop X-Elixir
	//1 000001 010 001 010
	0x82,0x8A,0x07,0x00,
	//Large Chest #11 (CURE)
	//1 000001 110 110 011
	0x83,0xB3,0x0B,0x00,
	//Inn Bookshelf #4
	//1 000001 100 001 100
	0x83,0x0C,0x08,0x00
};

RAW_DATA mapCaveEvents[] =
{
	8,
	//Teleport to Overworld (Entrance)
	//000000 111 111 000
	//0000 101101 001 000
	0x01,0xF8,0x0B,0x48,
	//Teleport Entrance to Lower Level
	//000000 000 111 000
	//1001 000001 111 000
	0x00,0x38,0x90,0x78,
	//Teleport Lower Level to Entrance
	//000001 111 000 000
	//1001 000000 000 111
	0x03,0xC0,0x90,0x07,
	//Teleport Lower Level 1 to Lower Level 2
	//000001 000 101 000
	//1001 000010 111 000
	0x02,0x28,0x90,0xB8,
	//Teleport Lower Level 2 to Lower Level 1
	//000010 111 000 000
	//1001 000001 000 101
	0x05,0xC0,0x90,0x45,
	//Teleport Lower Level to Exit
	//000010 000 000 000
	//1001 000011 111 001
	0x04,0x00,0x90,0xF9,
	//Teleport Exit to Lower Level
	//000011 111 001 000
	//1001 000010 000 000
	0x07,0xC8,0x90,0x80,
	//Teleport to Overworld (Exit)
	//000011 000 111 000
	//0000 110100 001 000
	0x06,0x38,0x0D,0x08
};

RAW_DATA mapCastle3Events[] =
{
	4,
	//Teleport to Overworld (Left)
	//0 000000 011 111 000
	//0000 110100 101 100
	0x00,0xF8,0x0D,0x2C,
	//Teleport to Overworld (Right)
	//0 000000 100 111 000
	//0000 110100 110 100
	0x01,0x38,0x0D,0x34,
	//King
	//1 000000 011 010 100
	0x80,0xD4,0x03,0x40,
	//Large Chest #12 (CHARM)
	//1 000000 100 010 011
	0x81,0x13,0x0C,0x83
};

RAW_DATA mapTower3Events[] =
{
	23,
	//Teleport to Overworld
	//0 000010 111 111 000
	//0000 110011 011 010
	0x05,0xF8,0x0C,0xDA,
	//Stairs 1 (Up)
	//0 000010 011 011 000
	//1011 000110 011 011
	0x04,0xD8,0xB1,0x9B,
	//Stairs 1 (Down)
	//0 000110 011 011 000
	//1011 000010 011 011
	0x0C,0xD8,0xB0,0x9B,
	//Stairs 2 (Up)
	//0 000100 011 100 000
	//1011 001000 011 100
	0x08,0xE0,0xB2,0x1C,
	//Stairs 2 (Down)
	//0 001000 011 100 000
	//1011 000100 011 100
	0x10,0xE0,0xB1,0x1C,
	//Stairs 3 (Down)
	//0 001010 001 000 000
	//1011 000110 001 000
	0x14,0x40,0xB1,0x88,
	//Stairs 3 (Up)
	//0 000110 001 000 000
	//1011 001010 001 000
	0x0C,0x40,0xB2,0x88,
	//Stairs 4 (Down)
	//0 000100 000 111 000
	//1011 000000 000 111
	0x08,0x38,0xB0,0x07,
	//Stairs 4 (Up)
	//0 000000 000 111 000
	//1011 000100 000 111
	0x00,0x38,0xB1,0x07,
	//Stairs 5 (Up)
	//0 000001 111 110 000
	//1011 000101 111 110
	0x03,0xF0,0xB1,0x7E,
	//Stairs 5 (Down)
	//0 000101 111 110 000
	//1011 000001 111 110
	0x0B,0xF0,0xB0,0x7E,
	//Stairs 6 (Up)
	//0 000101 011 011 000
	//1011 001001 011 011
	0x0A,0xD8,0xB2,0x5B,
	//Stairs 6 (Down)
	//0 001001 011 011 000
	//1011 000101 011 011
	0x12,0xD8,0xB1,0x5B,
	//Passage (Down)
	//0 000101 100 111 000
	//1011 000111 100 001
	0x0B,0x38,0xB1,0xE1,
	//Passage (Up)
	//0 000111 100 001 000
	//1011 000101 100 111
	0x0F,0x08,0xB1,0x67,
	//Stairs 7 (Down)
	//0 000111 011 011 000
	//1011 000011 011 011
	0x0E,0xD8,0xB0,0xDB,
	//Stairs 7 (Up)
	//0 000011 011 011 000
	//1011 000111 011 011
	0x06,0xD8,0xB1,0xDB,
	//Stairs 8 (Up)
	//0 000110 110 111 000
	//1011 001010 110 111
	0x0D,0xB8,0xB2,0xB7,
	//Stairs 8 (Down)
	//0 001010 110 111 000
	//1011 000110 110 111 000
	0x15,0xB8,0xB1,0xB7,
	//Large Chest #13 (ROCK)
	//1 000001 000 001 011
	0x82,0x0B,0x0D,0x04,
	//Large Chest #14 (SWORD)
	//1 001011 011 100 011
	0x96,0xE3,0x0E,0x80,
	//Large Chest #15 (IMMUNE AQUA)
	//1 000011 101 010 011
	0x87,0x53,0x0F,0xC3,
	//Boss #3 (ID=2 Seal=4)
	//0 001000 110 010 101
	0x11,0x95,0x02,0x04
};

RAW_DATA mapTown4Events[] =
{
	13,
	//Teleport to Overworld
	//0 000000 010 110 000
	//0000 111000 110 011
	0x00,0xB0,0x0E,0x33,
	//Inn
	//1 000001 101 011 001
	0x83,0x51,0x00,0x00,
	//Shop Potion
	//1 000000 011 001 010
	0x80,0xCA,0x00,0x00,
	//Shop S-Potion
	//1 000000 100 001 010
	0x81,0x0A,0x01,0x00,
	//Shop X-Potion
	//1 000000 101 001 010
	0x81,0x4A,0x02,0x00,
	//Shop Ether
	//1 000000 110 001 010
	0x81,0x8A,0x03,0x00,
	//Shop S-Ether
	//1 000000 111 001 010
	0x81,0xCA,0x04,0x00,
	//Shop X-Ether
	//1 000001 000 001 010
	0x82,0x0A,0x05,0x00,
	//Shop Elixir
	//1 000001 001 001 010
	0x82,0x4A,0x06,0x00,
	//Shop X-Elixir
	//1 000001 010 001 010
	0x82,0x8A,0x07,0x00,
	//Large Chest #16 (ARMOR)
	//1 000001 110 110 011
	0x83,0xB3,0x10,0x81,
	//Inn Bookshelf #5
	//1 000001 100 001 100
	0x83,0x0C,0x09,0x00
};

RAW_DATA mapCastle4Events[] =
{
	4,
	//Teleport to Overworld (Left)
	//0 000000 011 111 000
	//0000 110010 010 011
	0x00,0xF8,0x0C,0x93,
	//Teleport to Overworld (Right)
	//0 000000 100 111 000
	//0000 110010 011 011
	0x01,0x38,0x0C,0x9B,
	//King
	//1 000000 011 010 100
	0x80,0xD4,0x04,0x80,
	//Large Chest #17 (AERO)
	//1 000000 100 010 011
	0x81,0x13,0x11,0x05
};

RAW_DATA mapTower4Events[] =
{
	23,
	//Teleport to Overworld
	//0 000010 111 111 000
	//0000 111010 011 010
	0x05,0xF8,0x0E,0x9A,
	//Stairs 1 (Up)
	//0 000010 011 011 000
	//1110 000110 011 011
	0x04,0xD8,0xE1,0x9B,
	//Stairs 1 (Down)
	//0 000110 011 011 000
	//1110 000010 011 011
	0x0C,0xD8,0xE0,0x9B,
	//Stairs 2 (Up)
	//0 000100 011 100 000
	//1110 001000 011 100
	0x08,0xE0,0xE2,0x1C,
	//Stairs 2 (Down)
	//0 001000 011 100 000
	//1110 000100 011 100
	0x10,0xE0,0xE1,0x1C,
	//Stairs 3 (Down)
	//0 001010 001 000 000
	//1110 000110 001 000
	0x14,0x40,0xE1,0x88,
	//Stairs 3 (Up)
	//0 000110 001 000 000
	//1110 001010 001 000
	0x0C,0x40,0xE2,0x88,
	//Stairs 4 (Down)
	//0 000100 000 111 000
	//1110 000000 000 111
	0x08,0x38,0xE0,0x07,
	//Stairs 4 (Up)
	//0 000000 000 111 000
	//1110 000100 000 111
	0x00,0x38,0xE1,0x07,
	//Stairs 5 (Up)
	//0 000001 111 110 000
	//1110 000101 111 110
	0x03,0xF0,0xE1,0x7E,
	//Stairs 5 (Down)
	//0 000101 111 110 000
	//1110 000001 111 110
	0x0B,0xF0,0xE0,0x7E,
	//Stairs 6 (Up)
	//0 000101 011 011 000
	//1110 001001 011 011
	0x0A,0xD8,0xE2,0x5B,
	//Stairs 6 (Down)
	//0 001001 011 011 000
	//1110 000101 011 011
	0x12,0xD8,0xE1,0x5B,
	//Passage (Down)
	//0 000101 100 111 000
	//1110 000111 100 001
	0x0B,0x38,0xE1,0xE1,
	//Passage (Up)
	//0 000111 100 001 000
	//1110 000101 100 111
	0x0F,0x08,0xE1,0x67,
	//Stairs 7 (Down)
	//0 000111 011 011 000
	//1110 000011 011 011
	0x0E,0xD8,0xE0,0xDB,
	//Stairs 7 (Up)
	//0 000011 011 011 000
	//1110 000111 011 011
	0x06,0xD8,0xE1,0xDB,
	//Stairs 8 (Up)
	//0 000110 110 111 000
	//1110 001010 110 111
	0x0D,0xB8,0xE2,0xB7,
	//Stairs 8 (Down)
	//0 001010 110 111 000
	//1110 000110 110 111 000
	0x15,0xB8,0xE1,0xB7,
	//Large Chest #18 (BOOTS)
	//1 000001 000 001 011
	0x82,0x0B,0x12,0x82,
	//Large Chest #19 (CHARM)
	//1 001011 011 100 011
	0x96,0xE3,0x13,0x83,
	//Large Chest #20 (DARK)
	//1 000011 101 010 011
	0x87,0x53,0x14,0x06,
	//Boss #4 (ID=3 Seal=8)
	//0 001000 110 010 101
	0x11,0x95,0x03,0x08
};

RAW_DATA mapTower5Events[] =
{
	23,
	//Teleport to Overworld
	//0 000010 111 111 000
	//0000 011000 010 100
	0x05,0xF8,0x06,0x14,
	//Stairs 1 (Up)
	//0 000010 011 011 000
	//1111 000110 011 011
	0x04,0xD8,0xF1,0x9B,
	//Stairs 1 (Down)
	//0 000110 011 011 000
	//1111 000010 011 011
	0x0C,0xD8,0xF0,0x9B,
	//Stairs 2 (Up)
	//0 000100 011 100 000
	//1111 001000 011 100
	0x08,0xE0,0xF2,0x1C,
	//Stairs 2 (Down)
	//0 001000 011 100 000
	//1111 000100 011 100
	0x10,0xE0,0xF1,0x1C,
	//Stairs 3 (Down)
	//0 001010 001 000 000
	//1111 000110 001 000
	0x14,0x40,0xF1,0x88,
	//Stairs 3 (Up)
	//0 000110 001 000 000
	//1111 001010 001 000
	0x0C,0x40,0xF2,0x88,
	//Stairs 4 (Down)
	//0 000100 000 111 000
	//1111 000000 000 111
	0x08,0x38,0xF0,0x07,
	//Stairs 4 (Up)
	//0 000000 000 111 000
	//1111 000100 000 111
	0x00,0x38,0xF1,0x07,
	//Stairs 5 (Up)
	//0 000001 111 110 000
	//1111 000101 111 110
	0x03,0xF0,0xF1,0x7E,
	//Stairs 5 (Down)
	//0 000101 111 110 000
	//1111 000001 111 110
	0x0B,0xF0,0xF0,0x7E,
	//Stairs 6 (Up)
	//0 000101 011 011 000
	//1111 001001 011 011
	0x0A,0xD8,0xF2,0x5B,
	//Stairs 6 (Down)
	//0 001001 011 011 000
	//1111 000101 011 011
	0x12,0xD8,0xF1,0x5B,
	//Passage (Down)
	//0 000101 100 111 000
	//1111 000111 100 001
	0x0B,0x38,0xF1,0xE1,
	//Passage (Up)
	//0 000111 100 001 000
	//1111 000101 100 111
	0x0F,0x08,0xF1,0x67,
	//Stairs 7 (Down)
	//0 000111 011 011 000
	//1111 000011 011 011
	0x0E,0xD8,0xF0,0xDB,
	//Stairs 7 (Up)
	//0 000011 011 011 000
	//1111 000111 011 011
	0x06,0xD8,0xF1,0xDB,
	//Stairs 8 (Up)
	//0 000110 110 111 000
	//1111 001010 110 111
	0x0D,0xB8,0xF2,0xB7,
	//Stairs 8 (Down)
	//0 001010 110 111 000
	//1111 000110 110 111 000
	0x15,0xB8,0xF1,0xB7,
	//Large Chest #21 (FIRE)
	//1 000001 000 001 011
	0x82,0x0B,0x15,0x02,
	//Large Chest #22 (HOLY)
	//1 001011 011 100 011
	0x96,0xE3,0x16,0x07,
	//Large Chest #23 (NUKE)
	//1 000011 101 010 011
	0x87,0x53,0x17,0x01,
	//Boss #5 (ID=4 Seal=0)
	//0 001000 110 010 101
	0x11,0x95,0x04,0x00
};
//END: Map Events

//BEGIN: Maps
RAW_DATA mapKeys[] = //1 byte for each map with the upper 4 bits set to the key needed (0 means no key needed, 16 means all 4 seals needed)
{
	0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x12,0x00,0x00,0x00,0x43,0x00,0x00,0x87,0x0F
};

//GOBLIN FIREWOLF SCORPION MEGABAT SKELETON SLIME WIZARD GOLEM
RAW_DATA mapMonsters[] = //1 byte for each map with 1 bit per monster
{
	0x00,//Overworld
	0x00,//Castle0
	0x00,//North-east town (Town1)
	0x00,//North-east castle (Castle1)
	0x88,//North-east tower (Tower1) 10001000 (Goblin, Skeleton)
	0x00,//North-west town (Town2)
	0x00,//North-west castle (Castle2)
	0x44,//North-west tower (Tower2) 01000100 (Firewolf, Slime)
	0x00,//South-west town (Town3)
	0x10,//South-west cave (Cave) 00010000 (Megabat)
	0x00,//South-west castle (Castle3)
	0x02,//South-west tower (Tower3) 00000010 (Wizard)
	0x00,//South-east town (Town4)
	0x00,//South-east castle (Castle4)
	0x01,//South-east tower (Tower4) 00000001 (Golem)
	0x03 //Final Tower (Tower5) 00000011 (Wizard, Golem)
};

DATA_POINTER maps[] =
{
	mapOverworld,//0000
	mapMainCastle,//0001 (Castle0)
	mapTown, //0010: North-east town (Town1)
	mapCastle, //0011: North-east castle (Castle1)
	mapTower,//0100: North-east tower (Tower1)
	mapTown,//0101: North-west town (Town2)
	mapCastle,//0110: North-west castle (Castle2)
	mapTower,//0111: North-west tower (Tower2)
	mapTown,//1000: South-west town (Town3)
	mapCave,//1001: South-west cave (Cave)
	mapCastle,//1010: South-west castle (Castle3)
	mapTower,//1011: South-west tower (Tower3)
	mapTown,//1100: South-east town (Town4)
	mapCastle,//1101: South-east castle (Castle4)
	mapTower,//1110: South-east tower (Tower4)
	mapTower//1111: Final Tower (Tower5)
};

DATA_POINTER mapEvents[] =
{
	mapOverworldEvents,
	mapMainCastleEvents,
	mapTown1Events,
	mapCastle1Events,
	mapTower1Events,
	mapTown2Events,
	mapCastle2Events,
	mapTower2Events,
	mapTown3Events,
	mapCaveEvents,
	mapCastle3Events,
	mapTower3Events,
	mapTown4Events,
	mapCastle4Events,
	mapTower4Events,
	mapTower5Events
};
//END: Maps

//BEGIN: Monsters
static const uint8_t NUM_MONSTER_GROUPS = 30;

//1365 - 728 = 637 (15 monsters - 8 monsters = 637 bytes saved)
/* Monsters (24 bytes)
 8 *Bytes Name
 2 Bytes
 -  6 bits MP
 - 10 bits HP
 1 Byte Attack
 1 Byte Defense
 1 Byte Agility
 1 Byte Magic
 2 Bytes
 - 2 bits per spell (HOLY DARK AERO ROCK AQUA FIRE NUKE CURE)
 0 = Immune
 1 = 50% damage
 2 = 100% damage
 3 = 150% damage
 3 Byte (CURE NUKE FIRE AQUA ROCK AERO DARK HOLY)
 - 3 bits per spell indicates spell level
 1 Byte EXP Gain
 1 Byte G Gain
 */
RAW_DATA monsters[] =
{
	//0: GOBLIN
	CHAR_G, CHAR_O, CHAR_B, CHAR_L, CHAR_I, CHAR_N, CHAR_NULL, CHAR_NULL,
	//mp/hp: 000000 0000000100
	0x00,0x04,
	3,1,3,0,
	//immunity: 10 10 10 10 01 11 10 10 (HOLY DARK AERO ROCK AQUA FIRE NUKE CURE)
	0xAA,0x7A,
	//spells: 000 000 000 000 000 000 000 000
	0x00,0x00,0x00,
	//EXP,G
	1,2,
	//1: FIREWOLF
	CHAR_F, CHAR_I, CHAR_R, CHAR_E, CHAR_W, CHAR_O, CHAR_L, CHAR_F,
	//mp/hp: 000001 0000001100
	0x04,0x0C,
	22,18,25,18,
	//immunity: 10 10 10 10 11 01 10 10 (HOLY DARK AERO ROCK AQUA FIRE NUKE CURE)
	0xAA,0xDA,
	//spells: 000 000 001 000 000 000 000 000
	0x00,0x80,0x00,
	//EXP,G
	2,3,
	//2: SCORPION
	CHAR_S, CHAR_C, CHAR_O, CHAR_R, CHAR_P, CHAR_I, CHAR_O, CHAR_N,
	//mp/hp: 000000 0000011110
	0x00,0x1E,
	42,56,50,20,
	//immunity: 10 10 01 11 10 10 10 10 (HOLY DARK AERO ROCK AQUA FIRE NUKE CURE)
	0xA7,0xAA,
	//spells: 000 000 000 000 000 000 000 000
	0x00,0x00,0x00,
	//EXP,G
	4,6,
	//3: MEGA BAT
	CHAR_M, CHAR_E, CHAR_G, CHAR_A, CHAR_SPACE, CHAR_B, CHAR_A, CHAR_T,
	//mp/hp: 000000 0000010010
	0x00,0x01,
	28,26,40,0,
	//immunity: 00 00 00 00 00 00 00 00 (HOLY DARK AERO ROCK AQUA FIRE NUKE CURE)
	0x00,0x00,
	//spells: 000 000 000 000 000 000 000 000
	0x00,0x00,0x00,
	//EXP,G
	2,3,
	//4: SKELETON
	CHAR_S, CHAR_K, CHAR_E, CHAR_L, CHAR_E, CHAR_T, CHAR_O, CHAR_N,
	//mp/hp: 000000 0000000110
	0x00,0x06,
	8, 6, 5, 3,
	//immunity: 10 10 10 10 10 11 10 10 (HOLY DARK AERO ROCK AQUA FIRE NUKE CURE)
	0xAA,0xBA,
	//spells: 000 000 000 000 000 000 000 000
	0x00,0x00,0x00,
	//EXP,G
	1,2,
	//5: SLIME
	CHAR_S, CHAR_L, CHAR_I, CHAR_M, CHAR_E, CHAR_NULL, CHAR_NULL, CHAR_NULL,
	//mp/hp: 000000 0000001111
	0x00,0x0F,
	24,22,20,9,
	//immunity: 10 10 10 01 11 10 10 10 (HOLY DARK AERO ROCK AQUA FIRE NUKE CURE)
	0xA9,0xEA,
	//spells: 000 000 000 000 000 000 000 000
	0x00,0x00,0x00,
	//EXP,G
	2,3,
	//6: WIZARD
	CHAR_W, CHAR_I, CHAR_Z, CHAR_A, CHAR_R, CHAR_D, CHAR_NULL, CHAR_NULL,
	//mp/hp: 001010 0000111100
	0x28,0x3C,
	30,0,60,60,
	//immunity: 00 00 00 00 00 00 00 00 (HOLY DARK AERO ROCK AQUA FIRE NUKE CURE)
	0x00,0x00,
	//spells: 010 000 001 001 001 001 000 000
	0x40,0x92,0x40,
	//EXP,G
	4,6,
	//7: GOLEM
	CHAR_G, CHAR_O, CHAR_L, CHAR_E, CHAR_M, CHAR_NULL, CHAR_NULL, CHAR_NULL,
	//mp/hp: 001010 0001010110
	0x28,0x56,
	71,76,1,46,
	//immunity: 10 10 01 00 11 01 10 10 (HOLY DARK AERO ROCK AQUA FIRE NUKE CURE)
	0xA4,0xDA,
	//spells: 000 000 000 000 010 000 000 000
	0x00,0x04,0x00,
	//EXP,G
	4,6
};

/* Bosses (23 bytes)
8 Bytes NAME
2 Bytes HP
1 Byte MP
1 Byte Attack
1 Byte Defense
1 Byte Agility
1 Byte Magic
2 Bytes (HOLY DARK AERO ROCK AQUA FIRE NUKE CURE)
	- 2 bits per spell
		0 = Immune
		1 = 50% damage
		2 = 100% damage
		3 = 150% damage
3 Byte (CURE NUKE FIRE AQUA ROCK AERO DARK HOLY)
	- 3 bit per spell indicates spell level
1 Byte EXP Gain
1 Byte G Gain
*/

RAW_DATA bosses[] =
{
	//Boss1 BIG BONE
	CHAR_B,CHAR_I,CHAR_G,CHAR_SPACE,CHAR_B,CHAR_O,CHAR_N,CHAR_E,
	0x00,0x2D,0x00,
	16,10,30,12,
	//10 10 10 10 10 11 10 10 (HOLY DARK AERO ROCK AQUA FIRE NUKE CURE)
	0xAA,0xBA,
	0x00,0x00,0x00,
	//EXP,G
	16,4,
	//Boss2 OOZE
	CHAR_O,CHAR_O,CHAR_Z,CHAR_E,CHAR_NULL,CHAR_NULL,CHAR_NULL,CHAR_NULL,
	0x00,0x3C,0x00,
	50,40,25,33,
	//10 10 10 10 11 01 10 10 (HOLY DARK AERO ROCK AQUA FIRE NUKE CURE)
	0xAA,0xDA,
	0x00,0x00,0x00,
	//EXP,G
	16,15,
	//Boss3 SORCERER
	CHAR_S,CHAR_O,CHAR_R,CHAR_C,CHAR_E,CHAR_R,CHAR_E,CHAR_R,
	0x01,0x60,0x1E,
	70,60,90,60,
	0x00,0x00,
	0x40,0x92,0x40,
	//EXP,G
	22,28,
	//Boss4 COLOSSUS
	CHAR_C,CHAR_O,CHAR_L,CHAR_O,CHAR_S,CHAR_S,CHAR_U,CHAR_S,
	0x01,0xF4,0x1E,
	83,94,2,52,
	//10 10 01 00 11 01 10 10 (HOLY DARK AERO ROCK AQUA FIRE NUKE CURE)
	0xA4,0xDA,
	//000 000 000 000 011 000 000 000
	0x00,0x06,0x00,
	//EXP,G
	32,38,
	//Boss5 DARKNESS
	CHAR_D,CHAR_A,CHAR_R,CHAR_K,CHAR_N,CHAR_E,CHAR_S,CHAR_S,
	0x0C,0x80,0xFF,
	126,106,255,102,
	//11 00 01 01 01 01 01 00 (HOLY DARK AERO ROCK AQUA FIRE NUKE CURE)
	0xC5,0x54,
	//011 000 000 000 000 000 001 000
	0x60,0x00,0x08,
	//EXP,G
	68,100
};

/* Monster Groups (4 bytes each)
3 Bytes
	- 4 bits monster1 ID (If boss battle this ID will be 15)
	- 4 bits monster2 ID
	- 4 bits monster3 ID
	- 4 bits monster4 ID
	- 4 bits monster5 ID
	- 4 bits monster6 ID
1 Byte tiles found on (only used if tileset=0)
*/

RAW_DATA monsterGroups[] =
{
	//1 GOBLIN //01000000
	0x0F,0xFF,0xFF,0x40,
	//2 GOBLINS
	0x00,0xFF,0xFF,0x40,
	//3 GOBLINS
	0x00,0x0F,0xFF,0x20,
	//1 WOLF
	0x1F,0xFF,0xFF,0x20,
	//2 WOLF
	0x11,0xFF,0xFF,0x20,
	//1 WOLF and 1 GOBLIN
	0x01,0xFF,0xFF,0x20,
	//1 WOLF and 2 GOBLIN
	0x00,0x1F,0xFF,0x20,
	//2 SCORPION
	0x22,0xFF,0xFF,0x08,
	//3 SCORPION
	0x22,0x2F,0xFF,0x08,
	//4 SCORPION
	0x22,0x22,0xFF,0x08,
	//2 MEGABAT
	0x33,0xFF,0xFF,0x00,
	//4 MEGABAT
	0x33,0x33,0xFF,0x00,
	//6 MEGABAT
	0x33,0x33,0x33,0x00,
	//Tower 1
	//2 SKELETON and 2 GOBLIN
	0x44,0x00,0xFF,0x00,
	//4 SKELETON and 1 GOBLIN
	0x44,0x44,0x0F,0x00,
	//6 SKELETON
	0x44,0x44,0x44,0x00,
	//Tower 2
	//2 SLIME and 2 FIREWOLF
	0x55,0x11,0xFF,0x00,
	//3 SLIME and 1 FIREWOLF
	0x55,0x51,0xFF,0x00,
	//4 SLIME
	0x55,0x55,0xFF,0x00,
	//Tower 3
	//1 WIZARD
	0x6F,0xFF,0xFF,0x00,
	//2 WIZARD
	0x66,0xFF,0xFF,0x00,
	//3 WIZARD
	0x66,0x6F,0xFF,0x00,
	//Tower 4
	//2 GOLEM
	0x77,0xFF,0xFF,0x00,
	//3 GOLEM
	0x77,0x7F,0xFF,0x00,
	//4 GOLEM
	0x77,0x77,0xFF,0x00,
	//Tower 5
	//2 WIZARD and 2 GOLEM
	0x66,0x77,0xFF,0x00,
	//2 WIZARD and 4 GOLEM
	0x66,0x77,0x77,0x00,
	//3 WIZARD and 3 GOLEM
	0x66,0x67,0x77,0x00,
	//4 WIZARD and 2 GOLEM
	0x66,0x66,0x77,0x00,
	//5 WIZARD and 1 GOLEM
	0x66,0x66,0x67,0x00
};

RAW_DATA bossGroups[] =
{
	//0x00 Boss 1 + 2 Skeleton
	0xF0,0x44,
	//0x03 Boss 2 + 2 Slime
	0xF1,0x55,
	//0x06 Boss 3 + 2 Wizards
	0xF2,0x66,
	//0x09 Boss 4 + 2 Golems
	0xF3,0x77,
	//0x0C Boss 5 and nothing else
	0xF4,0xFF
};
//END: Monsters

//BEGIN: Text
RAW_DATA wordItems[] =
{
	//POTION
	CHAR_P, CHAR_O, CHAR_T, CHAR_I, CHAR_O, CHAR_N, CHAR_SPACE, CHAR_SPACE,
	//S-POTION
	CHAR_S, CHAR_DASH, CHAR_P, CHAR_O, CHAR_T, CHAR_I, CHAR_O, CHAR_N,
	//X-POTION
	CHAR_X, CHAR_DASH, CHAR_P, CHAR_O, CHAR_T, CHAR_I, CHAR_O, CHAR_N,
	//ETHER
	CHAR_E, CHAR_T, CHAR_H, CHAR_E, CHAR_R, CHAR_SPACE, CHAR_SPACE, CHAR_SPACE,
	//S-ETHER
	CHAR_S, CHAR_DASH, CHAR_E, CHAR_T, CHAR_H, CHAR_E, CHAR_R, CHAR_SPACE,
	//X-ETHER
	CHAR_X, CHAR_DASH, CHAR_E, CHAR_T, CHAR_H, CHAR_E, CHAR_R, CHAR_SPACE,
	//ELIXIR
	CHAR_E, CHAR_L, CHAR_I, CHAR_X, CHAR_I, CHAR_R, CHAR_SPACE, CHAR_SPACE,
	//X-ELIXIR
	CHAR_X, CHAR_DASH, CHAR_E, CHAR_L, CHAR_I, CHAR_X, CHAR_I, CHAR_R
};

RAW_DATA wordSpells[] =
{
	//CURE
	CHAR_C, CHAR_U, CHAR_R, CHAR_E,
	//NUKE
	CHAR_N, CHAR_U, CHAR_K, CHAR_E,
	//FIRE
	CHAR_F, CHAR_I, CHAR_R, CHAR_E,
	//AQUA
	CHAR_A, CHAR_Q, CHAR_U, CHAR_A,
	//ROCK
	CHAR_R, CHAR_O, CHAR_C, CHAR_K,
	//AERO
	CHAR_A, CHAR_E, CHAR_R, CHAR_O,
	//DARK
	CHAR_D, CHAR_A, CHAR_R, CHAR_K,
	//HOLY
	CHAR_H, CHAR_O, CHAR_L, CHAR_Y
};

RAW_DATA huffmanNodes[] = //112 bytes
{
	0x82,0x84,0x84,0x86,0x9F,0xA1,0x84,0x86,0x93,0x95,0x84,0x86,0x87,0x88,0x83,0x84,
	0x0E,0x03,0x15,0x13,0x82,0x84,0x83,0x84,0x09,0x0B,0x16,0x83,0x84,0x05,0x12,0x82,
	0x83,0x0C,0x3F,0x84,0x85,0x9C,0x9E,0x00,0x82,0x84,0x83,0x85,0x0F,0x84,0x85,0x90,
	0x91,0x17,0x82,0x84,0x83,0x85,0x02,0x84,0x85,0x84,0x85,0x1E,0x18,0x1C,0x28,0x2A,
	0x07,0x84,0x85,0x8A,0x8B,0x01,0x82,0x84,0x83,0x84,0x08,0x0D,0x06,0x14,0x82,0x83,
	0x04,0x82,0x83,0x19,0x82,0x84,0x83,0x85,0x10,0x84,0x85,0x8A,0x8C,0x1D,0x82,0x83,
	0x20,0x82,0x83,0x1A,0x2B,0x83,0x85,0x1B,0x84,0x85,0x84,0x85,0x2C,0x29,0x11,0x0A
};

RAW_DATA messageTitleOptions[] = //13 bytes
{
	0x15,0x17,0x44,0x80,0xB1,0xE3,0x88,0x5C,0x81,0xFE,0xAB,0xCF,0x00
};

RAW_DATA messageNoSaveData[] = //11 bytes
{
	0x12,0x1B,0x85,0x86,0xB9,0xEC,0xEC,0x9A,0xD8,0x47,0xC0
};

RAW_DATA messageNoItems[] = //12 bytes
{
	0x13,0xFA,0xC3,0x3D,0x63,0x4B,0xE9,0xBC,0x35,0xCC,0x1F,0xAA
};

RAW_DATA messageUpload[] = //75 bytes
{
	0x84,0x05,0x88,0xB0,0x74,0xFA,0xC2,0x93,0x13,0xC1,0xA7,0x7F,0x2F,0xAE,0x76,0xDC,
	0xFE,0x0A,0xA1,0x8D,0xFF,0x5F,0xF4,0x64,0x47,0x1A,0xE7,0x6D,0xCF,0x5D,0x02,0xB3,
	0x1F,0xD5,0x2C,0x9A,0x98,0x3A,0x7D,0x61,0x49,0x5E,0x68,0xE6,0x0F,0x96,0x1F,0xEA,
	0xBC,0xF5,0x52,0x8D,0xB1,0x81,0xFE,0xAB,0xCF,0x2C,0xE5,0x11,0xE7,0xBE,0xFD,0x31,
	0x1A,0x9E,0x13,0x5F,0x6D,0xCF,0x5D,0x03,0x0C,0x7F,0x54
};

RAW_DATA messagePrologue0[] = //45 bytes
{
	0x51,0x55,0x8D,0x73,0x2B,0xB9,0xDB,0x72,0x8B,0x45,0x79,0x7A,0xE0,0x1F,0xA6,0x4A,
	0xD1,0xE7,0x4A,0x79,0xDC,0xA6,0xBA,0x6F,0xA8,0x6C,0x67,0x6D,0xC3,0x71,0x0F,0x61,
	0x25,0xEB,0x80,0xE3,0xD8,0x94,0xC1,0xF4,0x47,0x59,0xEC,0x4A,0xA0
};

RAW_DATA messagePrologue1[] = //53 bytes
{
	0x61,0xED,0xB9,0x4F,0x3B,0x94,0xE2,0x65,0x6F,0xD3,0x5B,0x45,0xE9,0x83,0xF4,0x03,
	0x1E,0x0A,0x1D,0x94,0xC1,0xF2,0xC8,0x3A,0xEA,0xD1,0xFA,0x69,0x83,0xF4,0x55,0x91,
	0x32,0x5E,0x0F,0xA7,0x6D,0x1E,0x73,0x17,0xE9,0xD6,0xBF,0x32,0xE4,0xBF,0xA7,0x6D,
	0xCA,0x2D,0x15,0xEA,0x80
};

RAW_DATA messagePrologue2[] = //40 bytes
{
	0x48,0xB0,0xF4,0xBD,0x67,0x6D,0xCF,0x62,0x18,0x2C,0x89,0x79,0x2B,0x47,0x9D,0x19,
	0xA7,0x54,0xC4,0xB2,0x6B,0xEB,0x9F,0xEE,0x86,0x91,0x89,0x2B,0x0D,0x38,0xD6,0xBC,
	0x52,0xA5,0x37,0xAD,0xA3,0x87,0xEA,0x80
};

RAW_DATA messagePrologue3[] = //49 bytes
{
	0x5B,0x2B,0xB1,0x99,0x08,0xE3,0x5A,0x9C,0xA3,0x11,0x0F,0x68,0xB7,0xA3,0x4A,0xDF,
	0xA6,0x0F,0xA1,0xB7,0x43,0xF4,0xEB,0x5F,0x9E,0xAF,0x3A,0x76,0xDC,0x66,0x9D,0x53,
	0xB7,0x9C,0xB2,0xC0,0xD7,0xBE,0x9D,0x73,0xCC,0xBA,0xD3,0xE9,0xDB,0x6B,0x56,0x0F,
	0xAA
};

RAW_DATA messageEpilogue0[] = //38 bytes
{
	0x45,0xB0,0xA4,0xDB,0x4B,0x9B,0xC2,0x9E,0x7A,0xBC,0xE7,0xE5,0xF6,0xDC,0xF6,0x21,
	0x82,0xC8,0xA7,0x6F,0x39,0x7B,0x6A,0xF4,0xF5,0xE8,0x71,0x3D,0x8C,0xB3,0x5A,0x2F,
	0xB6,0x72,0x8A,0xC1,0xF5,0x40
};

RAW_DATA messageEpilogue1[] = //50 bytes
{
	0x5B,0xDD,0xD0,0xCD,0x69,0x3B,0x6E,0x7B,0x10,0xC1,0x64,0x4B,0x64,0x0C,0xFE,0xFD,
	0x3B,0x69,0x61,0xAF,0x73,0xB6,0xD7,0xFE,0xD3,0xB1,0x53,0xAE,0x60,0xDF,0x6D,0xA2,
	0xE8,0xB4,0x57,0xA7,0x5C,0xB1,0x03,0x99,0x5E,0x1C,0x57,0x42,0x3C,0x32,0x6F,0x0D,
	0xB0,0x54
};

RAW_DATA messageEpilogue2[] = //61 bytes
{
	0x6E,0xFA,0xC3,0x34,0x09,0x74,0xFD,0x76,0x14,0x17,0xF2,0xFB,0x69,0x61,0xAF,0x73,
	0xB6,0xE7,0xFB,0x4E,0xC5,0x2F,0x07,0xD0,0x16,0x3C,0x71,0x0B,0x9D,0x73,0x56,0x3E,
	0x5D,0xEB,0xAC,0xED,0xB9,0xEC,0x43,0x05,0x91,0x4E,0xDE,0x72,0xFB,0x68,0xF3,0x98,
	0x94,0xEB,0x9E,0x65,0xC9,0x7F,0x2F,0xB6,0xE5,0x16,0x8A,0xF5,0x40
};

RAW_DATA messageEpilogue3[] = //64 bytes
{
	0x74,0xED,0xB4,0x74,0xB2,0x83,0x72,0xBB,0x38,0xD7,0x29,0xE0,0x0C,0x5A,0xFF,0xA3,
	0x22,0x94,0xC3,0xDD,0x63,0x3A,0xE1,0x61,0xAD,0x7D,0xB6,0x31,0x57,0x9E,0x9D,0xB7,
	0x2B,0xCD,0x1A,0xCB,0x79,0xDC,0xD1,0xFA,0x2B,0x07,0xC5,0x3F,0x0B,0xC1,0xF4,0x05,
	0x8F,0x1C,0x42,0xE7,0x5C,0xD4,0xF5,0xEF,0x97,0xDB,0x73,0xD8,0x86,0x0B,0x22,0xA8
};

RAW_DATA messageBattleEscape[] = //8 bytes
{
	0x0B,0x88,0x11,0x29,0x94,0x67,0xD5,0x00
};

RAW_DATA messageBattleNoEscape[] = //23 bytes
{
	0x26,0xFA,0xC3,0x01,0x83,0x4B,0xE8,0x81,0x19,0x94,0x67,0xCB,0xD5,0x2F,0x49,0x92,
	0x9D,0x91,0x4A,0x79,0xDC,0xA7,0x50
};

RAW_DATA messageBattleNoSpells[] = //13 bytes
{
	0x13,0xFA,0xC3,0x3D,0x63,0x4B,0xE8,0x60,0xDD,0x13,0x07,0xEA,0x80
};

RAW_DATA messageBattleChooseFightRun[] = //7 bytes
{
	0x09,0xD4,0xF5,0xEF,0xA2,0x04,0x40
};

RAW_DATA messageBattleChooseAction[] = //22 bytes
{
	0x26,0xCE,0xEC,0x01,0x90,0xFC,0xF4,0x93,0x5B,0x00,0x49,0x7E,0x7A,0xB1,0xF4,0xD3,
	0x2B,0x38,0x23,0x20,0x67,0xF6
};

RAW_DATA messageBattleSelectCharacter[] = //10 bytes
{
	0x10,0x26,0xA6,0x0E,0x58,0x37,0x89,0x80,0xE6,0x80
};

RAW_DATA messageBattleSelectMonster[] = //9 bytes
{
	0x0E,0x26,0xA6,0x0E,0x5E,0x96,0x25,0xCD,0x00
};

RAW_DATA messageBattlePartyDefeated[] = //9 bytes
{
	0x0E,0xFF,0x89,0xDF,0x4F,0x3D,0x5E,0x73,0xF0
};

RAW_DATA messageBattleDefends[] = //15 bytes
{
	0x19,0xF3,0xD5,0x8F,0x89,0x7B,0xC5,0x6B,0x3D,0x9A,0x65,0x6E,0x76,0x18,0xC4
};

RAW_DATA messageBattleFocuses[] = //19 bytes
{
	0x1D,0xD6,0xC0,0x12,0x64,0xBC,0x52,0xA1,0x76,0x71,0x44,0xC3,0x93,0xF4,0xA5,0x55,
	0xF9,0x52,0x40
};

RAW_DATA messageBattleNotEnoughMana[] = //9 bytes
{
	0x0F,0x1B,0xE8,0xC6,0xC3,0x5E,0xE6,0x98,0x38
};

RAW_DATA messageMainMenu[] = //13 bytes
{
	0x14,0x3F,0x3D,0x21,0x76,0x71,0x42,0xC3,0x5C,0xFD,0x41,0x3F,0x00
};

RAW_DATA messageGameSaved[] = //7 bytes
{
	0x0A,0xAF,0x34,0x70,0xB0,0xD7,0xE0
};

RAW_DATA messageSelectAnItem[] = //8 bytes
{
	0x0E,0x26,0xA6,0x0E,0x98,0x30,0xFC,0xF4
};

RAW_DATA messageItemDescription0[] = //10 bytes
{
	0x0D,0x46,0x0B,0x35,0xA4,0xA4,0x7E,0xE6,0xFF,0x80
};

RAW_DATA messageItemDescription1[] = //11 bytes
{
	0x0E,0x46,0x0B,0x35,0xA4,0xA5,0x7E,0x3F,0x73,0x7F,0xC0
};

RAW_DATA messageItemDescription2[] = //11 bytes
{
	0x0E,0x46,0x0B,0x35,0xA4,0xFC,0x7E,0x5F,0xB9,0xBF,0xE0
};

RAW_DATA messageItemDescription3[] = //9 bytes
{
	0x0C,0x46,0x0B,0x35,0xA4,0xA4,0x4D,0x3F,0x80
};

RAW_DATA messageItemDescription4[] = //10 bytes
{
	0x0D,0x46,0x0B,0x35,0xA4,0xA5,0x7E,0xE6,0x9F,0xC0
};

RAW_DATA messageItemDescription5[] = //10 bytes
{
	0x0D,0x46,0x0B,0x35,0xA4,0xA4,0x7E,0xE6,0x9F,0xC0
};

RAW_DATA messageItemDescription6[] = //15 bytes
{
	0x15,0x46,0x0B,0x35,0xA4,0xA5,0x7E,0x8F,0xC4,0xDF,0xF9,0x83,0xE9,0xA7,0xF0
};

RAW_DATA messageItemDescription7[] = //13 bytes
{
	0x15,0x46,0x0B,0x35,0xA4,0xC5,0x2A,0x6F,0xFC,0xC1,0xF4,0xD3,0xF8
};

RAW_DATA messageInn1[] = //7 bytes
{
	0x0C,0xED,0xB8,0x0B,0x2E,0x87,0x28
};

RAW_DATA messageInn2[] = //10 bytes
{
	0x10,0x2E,0xCF,0xA6,0x74,0xED,0xB8,0x71,0x1F,0xCE
};

RAW_DATA messageInsufficientFunds[] = //13 bytes
{
	0x13,0x38,0x90,0x75,0xD4,0xE0,0x3B,0x1E,0x9A,0x84,0x7C,0x55,0x00
};

RAW_DATA messageGameOver[] = //7 bytes
{
	0x09,0xAF,0x34,0x6B,0xB3,0x5A,0x00
};

RAW_DATA messageStats[] = //10 bytes
{
	0x0F,0xCE,0x32,0x79,0xEB,0x32,0xB5,0x4D,0x32,0xB0
};

RAW_DATA messageItemsFull[] = //11 bytes
{
	0x11,0xFA,0xC3,0x31,0x1C,0xD3,0x29,0x2F,0xD2,0xC3,0xC0
};

RAW_DATA messageChestEmpty[] = //9 bytes
{
	0x0E,0x06,0xD9,0x74,0x39,0x47,0xA7,0xFE,0xF8
};

RAW_DATA messageItemFound[] = //5 bytes
{
	0x06,0xD6,0xC2,0x3E,0x80
};

RAW_DATA messageSpellLearned[] = //5 bytes
{
	0x08,0x53,0xC4,0x17,0xE8
};

RAW_DATA messageSword[] = //4 bytes
{
	0x05,0x2A,0x2D,0x3C
};

RAW_DATA messageArmor[] = //4 bytes
{
	0x05,0xC4,0xD2,0xD0
};

RAW_DATA messageBoots[] = //4 bytes
{
	0x05,0xA7,0x77,0xC4
};

RAW_DATA messageCharm[] = //4 bytes
{
	0x05,0x06,0xF1,0x34
};

RAW_DATA messageImmunity[] = //7 bytes
{
	0x0B,0x88,0xC8,0xE5,0xD8,0x20,0x60
};

RAW_DATA messageMissingKey[] = //13 bytes
{
	0x15,0xFA,0xC3,0x01,0x82,0x37,0xD2,0xBC,0x38,0xC6,0x3C,0x9F,0x00
};

RAW_DATA messageCastle1[] = //22 bytes
{
	0x27,0x78,0x0D,0xC3,0x0E,0x35,0xCD,0xDA,0xBC,0x53,0xB6,0xD6,0x63,0xFA,0x75,0xCE,
	0xDB,0x3A,0x4E,0xBA,0x1A,0x54
};

RAW_DATA messageCastle2[] = //24 bytes
{
	0x2B,0xDB,0x47,0x0E,0x53,0xB6,0xE7,0x5D,0x0D,0x21,0x8F,0xEA,0x97,0x4D,0xD1,0x88,
	0xE5,0xEB,0x08,0xC6,0xA7,0xD6,0x25,0x50
};

RAW_DATA messageCastle3[] = //22 bytes
{
	0x27,0xDB,0x47,0x0E,0x53,0xB6,0xE7,0x5D,0x0D,0x21,0x8F,0xEA,0x97,0x4D,0xD1,0x88,
	0xE5,0xEB,0x09,0x47,0xD1,0xD4
};

RAW_DATA messageCastle4[] = //24 bytes
{
	0x29,0xDB,0x47,0x0E,0x53,0xB6,0xE7,0x5D,0x0D,0x21,0x8F,0xEA,0x97,0x4D,0xD1,0x88,
	0xE5,0xEB,0x28,0x3F,0xE6,0xC4,0xF1,0x54
};

RAW_DATA messageCastle5[] = //23 bytes
{
	0x28,0xDB,0x47,0x0E,0x53,0xB6,0xE7,0x5D,0x0D,0x21,0x8F,0xEA,0x97,0x4D,0xD1,0x88,
	0xE5,0xEB,0x2B,0xB5,0x3D,0x0A,0xA0
};

RAW_DATA messageBookshelf1[] = //23 bytes
{
	0x28,0xED,0xB8,0x63,0xFA,0x75,0xC3,0x4E,0x0E,0xB4,0xFA,0x1C,0x97,0xD7,0x35,0xB0,
	0x04,0xA7,0xD6,0x14,0x26,0xAD,0x6A
};

RAW_DATA messageBookshelf2[] = //23 bytes
{
	0x29,0xA3,0x79,0xD0,0xE5,0x0D,0x38,0x3A,0xD3,0xE9,0x4C,0x3C,0xB2,0xBD,0x1D,0x8B,
	0x8D,0x44,0xCA,0x79,0xEA,0xF3,0xAA
};

RAW_DATA messageBookshelf3[] = //24 bytes
{
	0x2B,0xED,0xB4,0x70,0x18,0x23,0x7D,0x29,0xB8,0xA3,0xD7,0xBE,0x5D,0x07,0xED,0xD8,
	0x7A,0x76,0xDC,0xF6,0x21,0x82,0xC8,0xAA
};

RAW_DATA messageBookshelf4[] = //24 bytes
{
	0x29,0xB1,0x57,0xD0,0xE3,0x3D,0x88,0x60,0xB2,0x29,0xEB,0x64,0xB5,0x1E,0xBD,0xF4,
	0xE4,0x0A,0xBE,0x9D,0xB4,0x39,0xAE,0xA0
};

RAW_DATA messageBookshelf5[] = //18 bytes
{
	0x1D,0xDB,0x52,0xAE,0x7B,0x10,0xC1,0x64,0x53,0x4F,0xA5,0xAB,0xCB,0xD5,0x0E,0xC7,
	0xD5,0x00
};

RAW_DATA messageConfirmUseItem[] = //3 bytes
{
	0x04,0x09,0x38
};

RAW_DATA wordExp[] = //4 bytes
{
	0x04,0x74,0x9F,0xF0
};

RAW_DATA wordLevelUp[] = //6 bytes
{
	0x08,0x53,0x35,0xAA,0x07,0xF8
};

RAW_DATA wordAttacks[] = //6 bytes
{
	0x08,0xCE,0xEC,0x01,0x84,0xB0
};

RAW_DATA wordUses[] = //4 bytes
{
	0x05,0x09,0x32,0x58
};

RAW_DATA wordCasts[] = //4 bytes
{
	0x06,0x06,0x17,0x14
};

RAW_DATA wordFor[] = //4 bytes
{
	0x04,0x9A,0xDA,0x00
};

RAW_DATA wordDmg[] = //4 bytes
{
	0x04,0x9E,0xD2,0xB0
};

RAW_DATA wordYesNo[] = //4 bytes
{
	0x06,0xF9,0x94,0x1B
};

RAW_DATA wordLevel[] = //5 bytes
{
	0x06,0x53,0x35,0xAA,0x00
};

RAW_DATA wordName[] = //7 bytes
{
	0x0C,0x63,0xCD,0x26,0x41,0xCD,0x18
};

RAW_DATA wordShopBuy[] = //4 bytes
{
	0x04,0xA6,0x1F,0xA0
};

DATA_POINTER messageItemDescription[] =
{
	messageItemDescription0,
	messageItemDescription1,
	messageItemDescription2,
	messageItemDescription3,
	messageItemDescription4,
	messageItemDescription5,
	messageItemDescription6,
	messageItemDescription7
};

DATA_POINTER messageStory[] =
{
	messagePrologue0,
	messagePrologue1,
	messagePrologue2,
	messagePrologue3,
	NULL,
	messageEpilogue0,
	messageEpilogue1,
	messageEpilogue2,
	messageEpilogue3
};

DATA_POINTER messageEvents[] =
{
	messageCastle1,
	messageCastle2,
	messageCastle3,
	messageCastle4,
	messageCastle5,
	messageBookshelf1,
	messageBookshelf2,
	messageBookshelf3,
	messageBookshelf4,
	messageBookshelf5
};

DATA_POINTER battleActionText[] =
{
	wordAttacks,
	messageBattleDefends,
	wordUses,
	wordCasts,
	messageBattleFocuses,
	messageBattleEscape
};

DATA_POINTER messageLargeChestItem[] =
{
	messageSword,
	messageArmor,
	messageBoots,
	messageCharm
};
//END: Text

//BEGIN: Songs
/*
 * 0: Title
 * 1: Overworld
 * 2: Castle
 * 3: Town
 * 4: Tower
 * 5: Cave
 * 6: Battle
 */
#define song0(t) t*(t>>3|t>>1)//1: Title
#define song1(t) t*(t>>1|t<<2|t>>3)&31//7: Overworld
#define song2(t) ((t*(t>>3|t>>1)&15)|3)<<1//3: Castle
#define song3(t) ((t*(t>>3|t<<2)&15)|3)<<1//5: Town
#define song4(t) t*(t>>2|t>>1)&15//2: Tower
#define song5(t) t*(t>>3|t<<2)&15//4: Cave
#define song6(t) t*(t>>3|t>>1)&7//6: Battle
uint8_t songTempo[] = {8,8,8,8,12,16,4};
//END: Songs

#endif //DATA_H
